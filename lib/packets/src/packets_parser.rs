// Generated by tools/packets_db/main.rs
// Auto generated file do not edit manually

use crate::packets::*;

pub fn parse(buffer: &[u8], packetver: u32) -> Box<dyn Packet> {
    if packetver >= 20170607 && buffer[0] == 0x71 && buffer[1] == 0x08 {
        return Box::new(PacketCzEnter2::from(buffer, packetver));
    }
    if packetver >= 20140402 && buffer[0] == 0x8A && buffer[1] == 0x08 {
        return Box::new(PacketCzReqname::from(buffer, packetver));
    }
    if packetver >= 20131223 && buffer[0] == 0x6A && buffer[1] == 0x09 {
        return Box::new(PacketCzReqname::from(buffer, packetver));
    }
    if packetver >= 20130515 && buffer[0] == 0x37 && buffer[1] == 0x04 {
        return Box::new(PacketCzRequestMove::from(buffer, packetver));
    }
    if packetver >= 20120702 && buffer[0] == 0x53 && buffer[1] == 0x09 {
        return Box::new(PacketCzRequestMove::from(buffer, packetver));
    }
    if packetver >= 20120307 && buffer[0] == 0x87 && buffer[1] == 0x08 {
        return Box::new(PacketCzRequestTime::from(buffer, packetver));
    }
    if packetver >= 20120307 && buffer[0] == 0x37 && buffer[1] == 0x04 {
        return Box::new(PacketCzRequestMove::from(buffer, packetver));
    }
    if packetver >= 20120307 && buffer[0] == 0x85 && buffer[1] == 0x08 {
        return Box::new(PacketCzRequestAct::from(buffer, packetver));
    }
    if packetver >= 20120307 && buffer[0] == 0x65 && buffer[1] == 0x08 {
        return Box::new(PacketCzItemPickup::from(buffer, packetver));
    }
    if packetver >= 20120307 && buffer[0] == 0xc4 && buffer[1] == 0x02 {
        return Box::new(PacketCzItemThrow::from(buffer, packetver));
    }
    if packetver >= 20120307 && buffer[0] == 0x39 && buffer[1] == 0x04 {
        return Box::new(PacketCzUseItem::from(buffer, packetver));
    }
    if packetver >= 20120307 && buffer[0] == 0x89 && buffer[1] == 0x08 {
        return Box::new(PacketCzUseSkill::from(buffer, packetver));
    }
    if packetver >= 20120307 && buffer[0] == 0x6A && buffer[1] == 0x08 {
        return Box::new(PacketCzEnter2::from(buffer, packetver));
    }
    if packetver >= 20120218 && buffer[0] == 0x6A && buffer[1] == 0x09 {
        return Box::new(PacketCzReqname::from(buffer, packetver));
    }
    if packetver >= 20111102 && buffer[0] == 0x3C && buffer[1] == 0x08 {
        return Box::new(PacketCzEnter2::from(buffer, packetver));
    }
    if packetver >= 20111005 && buffer[0] == 0x17 && buffer[1] == 0x08 {
        return Box::new(PacketCzRequestTime::from(buffer, packetver));
    }
    if packetver >= 20111005 && buffer[0] == 0x64 && buffer[1] == 0x03 {
        return Box::new(PacketCzRequestMove::from(buffer, packetver));
    }
    if packetver >= 20111005 && buffer[0] == 0x8A && buffer[1] == 0x08 {
        return Box::new(PacketCzReqname::from(buffer, packetver));
    }
    if packetver >= 20101124 && buffer[0] == 0x5f && buffer[1] == 0x03 {
        return Box::new(PacketCzRequestMove::from(buffer, packetver));
    }
    if packetver >= 20070227 && buffer[0] == 0xc4 && buffer[1] == 0x02 {
        return Box::new(PacketCzPartyJoinReq::from(buffer, packetver));
    }
    if buffer[0] == 0x64 && buffer[1] == 0x00 {
        return Box::new(PacketCaLogin::from(buffer, packetver));
    }
    if buffer[0] == 0x65 && buffer[1] == 0x00 {
        return Box::new(PacketChEnter::from(buffer, packetver));
    }
    if buffer[0] == 0x66 && buffer[1] == 0x00 {
        return Box::new(PacketChSelectChar::from(buffer, packetver));
    }
    if buffer[0] == 0x67 && buffer[1] == 0x00 {
        return Box::new(PacketChMakeChar::from(buffer, packetver));
    }
    if buffer[0] == 0x70 && buffer[1] == 0x09 {
        return Box::new(PacketChMakeChar2::from(buffer, packetver));
    }
    if buffer[0] == 0x68 && buffer[1] == 0x00 {
        return Box::new(PacketChDeleteChar::from(buffer, packetver));
    }
    if buffer[0] == 0x69 && buffer[1] == 0x00 {
        return Box::new(PacketAcAcceptLogin::from(buffer, packetver));
    }
    if buffer[0] == 0xc4 && buffer[1] == 0x0a {
        return Box::new(PacketAcAcceptLogin2::from(buffer, packetver));
    }
    if buffer[0] == 0x6a && buffer[1] == 0x00 {
        return Box::new(PacketAcRefuseLogin::from(buffer, packetver));
    }
    if buffer[0] == 0x6b && buffer[1] == 0x00 {
        return Box::new(PacketHcAcceptEnterNeoUnion::from(buffer, packetver));
    }
    if buffer[0] == 0x6c && buffer[1] == 0x00 {
        return Box::new(PacketHcRefuseEnter::from(buffer, packetver));
    }
    if buffer[0] == 0x6d && buffer[1] == 0x00 {
        return Box::new(PacketHcAcceptMakecharNeoUnion::from(buffer, packetver));
    }
    if buffer[0] == 0x6e && buffer[1] == 0x00 {
        return Box::new(PacketHcRefuseMakechar::from(buffer, packetver));
    }
    if buffer[0] == 0x6f && buffer[1] == 0x00 {
        return Box::new(PacketHcAcceptDeletechar::from(buffer, packetver));
    }
    if buffer[0] == 0x70 && buffer[1] == 0x00 {
        return Box::new(PacketHcRefuseDeletechar::from(buffer, packetver));
    }
    if buffer[0] == 0x71 && buffer[1] == 0x00 {
        return Box::new(PacketHcNotifyZonesvr::from(buffer, packetver));
    }
    if buffer[0] == 0x72 && buffer[1] == 0x00 {
        return Box::new(PacketCzEnter::from(buffer, packetver));
    }
    if buffer[0] == 0x73 && buffer[1] == 0x00 {
        return Box::new(PacketZcAcceptEnter::from(buffer, packetver));
    }
    if buffer[0] == 0x74 && buffer[1] == 0x00 {
        return Box::new(PacketZcRefuseEnter::from(buffer, packetver));
    }
    if buffer[0] == 0x75 && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyInitchar::from(buffer, packetver));
    }
    if buffer[0] == 0x76 && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyUpdatechar::from(buffer, packetver));
    }
    if buffer[0] == 0x77 && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyUpdateplayer::from(buffer, packetver));
    }
    if buffer[0] == 0x78 && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyStandentry::from(buffer, packetver));
    }
    if buffer[0] == 0x79 && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyNewentry::from(buffer, packetver));
    }
    if buffer[0] == 0x7a && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyActentry::from(buffer, packetver));
    }
    if buffer[0] == 0x7b && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyMoveentry::from(buffer, packetver));
    }
    if buffer[0] == 0x7c && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyStandentryNpc::from(buffer, packetver));
    }
    if buffer[0] == 0x7d && buffer[1] == 0x00 {
        return Box::new(PacketCzNotifyActorinit::from(buffer, packetver));
    }
    if buffer[0] == 0x7e && buffer[1] == 0x00 {
        return Box::new(PacketCzRequestTime::from(buffer, packetver));
    }
    if buffer[0] == 0x7f && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyTime::from(buffer, packetver));
    }
    if buffer[0] == 0x80 && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyVanish::from(buffer, packetver));
    }
    if buffer[0] == 0x81 && buffer[1] == 0x00 {
        return Box::new(PacketScNotifyBan::from(buffer, packetver));
    }
    if buffer[0] == 0x82 && buffer[1] == 0x00 {
        return Box::new(PacketCzRequestQuit::from(buffer, packetver));
    }
    if buffer[0] == 0x83 && buffer[1] == 0x00 {
        return Box::new(PacketZcAcceptQuit::from(buffer, packetver));
    }
    if buffer[0] == 0x84 && buffer[1] == 0x00 {
        return Box::new(PacketZcRefuseQuit::from(buffer, packetver));
    }
    if buffer[0] == 0x85 && buffer[1] == 0x00 {
        return Box::new(PacketCzRequestMove::from(buffer, packetver));
    }
    if buffer[0] == 0x86 && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyMove::from(buffer, packetver));
    }
    if buffer[0] == 0x87 && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyPlayermove::from(buffer, packetver));
    }
    if buffer[0] == 0x88 && buffer[1] == 0x00 {
        return Box::new(PacketZcStopmove::from(buffer, packetver));
    }
    if buffer[0] == 0x89 && buffer[1] == 0x00 {
        return Box::new(PacketCzRequestAct::from(buffer, packetver));
    }
    if buffer[0] == 0x8a && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyAct::from(buffer, packetver));
    }
    if buffer[0] == 0x8b && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyActPosition::from(buffer, packetver));
    }
    if buffer[0] == 0x8c && buffer[1] == 0x00 {
        return Box::new(PacketCzRequestChat::from(buffer, packetver));
    }
    if buffer[0] == 0x8d && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyChat::from(buffer, packetver));
    }
    if buffer[0] == 0x8e && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyPlayerchat::from(buffer, packetver));
    }
    if buffer[0] == 0x8f && buffer[1] == 0x00 {
        return Box::new(PacketServerEntryAck::from(buffer, packetver));
    }
    if buffer[0] == 0x90 && buffer[1] == 0x00 {
        return Box::new(PacketCzContactnpc::from(buffer, packetver));
    }
    if buffer[0] == 0x91 && buffer[1] == 0x00 {
        return Box::new(PacketZcNpcackMapmove::from(buffer, packetver));
    }
    if buffer[0] == 0x92 && buffer[1] == 0x00 {
        return Box::new(PacketZcNpcackServermove::from(buffer, packetver));
    }
    if buffer[0] == 0x93 && buffer[1] == 0x00 {
        return Box::new(PacketZcNpcackEnable::from(buffer, packetver));
    }
    if buffer[0] == 0x94 && buffer[1] == 0x00 {
        return Box::new(PacketCzReqname::from(buffer, packetver));
    }
    if buffer[0] == 0x95 && buffer[1] == 0x00 {
        return Box::new(PacketZcAckReqname::from(buffer, packetver));
    }
    if buffer[0] == 0x96 && buffer[1] == 0x00 {
        return Box::new(PacketCzWhisper::from(buffer, packetver));
    }
    if buffer[0] == 0x97 && buffer[1] == 0x00 {
        return Box::new(PacketZcWhisper::from(buffer, packetver));
    }
    if buffer[0] == 0x98 && buffer[1] == 0x00 {
        return Box::new(PacketZcAckWhisper::from(buffer, packetver));
    }
    if buffer[0] == 0x99 && buffer[1] == 0x00 {
        return Box::new(PacketCzBroadcast::from(buffer, packetver));
    }
    if buffer[0] == 0x9a && buffer[1] == 0x00 {
        return Box::new(PacketZcBroadcast::from(buffer, packetver));
    }
    if buffer[0] == 0x9b && buffer[1] == 0x00 {
        return Box::new(PacketCzChangeDirection::from(buffer, packetver));
    }
    if buffer[0] == 0x9c && buffer[1] == 0x00 {
        return Box::new(PacketZcChangeDirection::from(buffer, packetver));
    }
    if buffer[0] == 0x9d && buffer[1] == 0x00 {
        return Box::new(PacketZcItemEntry::from(buffer, packetver));
    }
    if buffer[0] == 0x9e && buffer[1] == 0x00 {
        return Box::new(PacketZcItemFallEntry::from(buffer, packetver));
    }
    if buffer[0] == 0x9f && buffer[1] == 0x00 {
        return Box::new(PacketCzItemPickup::from(buffer, packetver));
    }
    if buffer[0] == 0xa0 && buffer[1] == 0x00 {
        return Box::new(PacketZcItemPickupAck::from(buffer, packetver));
    }
    if buffer[0] == 0xa1 && buffer[1] == 0x00 {
        return Box::new(PacketZcItemDisappear::from(buffer, packetver));
    }
    if buffer[0] == 0xa2 && buffer[1] == 0x00 {
        return Box::new(PacketCzItemThrow::from(buffer, packetver));
    }
    if buffer[0] == 0xa3 && buffer[1] == 0x00 {
        return Box::new(PacketZcNormalItemlist::from(buffer, packetver));
    }
    if buffer[0] == 0xa4 && buffer[1] == 0x00 {
        return Box::new(PacketZcEquipmentItemlist::from(buffer, packetver));
    }
    if buffer[0] == 0xa5 && buffer[1] == 0x00 {
        return Box::new(PacketZcStoreNormalItemlist::from(buffer, packetver));
    }
    if buffer[0] == 0xa6 && buffer[1] == 0x00 {
        return Box::new(PacketZcStoreEquipmentItemlist::from(buffer, packetver));
    }
    if buffer[0] == 0xa7 && buffer[1] == 0x00 {
        return Box::new(PacketCzUseItem::from(buffer, packetver));
    }
    if buffer[0] == 0xa8 && buffer[1] == 0x00 {
        return Box::new(PacketZcUseItemAck::from(buffer, packetver));
    }
    if buffer[0] == 0xa9 && buffer[1] == 0x00 {
        return Box::new(PacketCzReqWearEquip::from(buffer, packetver));
    }
    if buffer[0] == 0xaa && buffer[1] == 0x00 {
        return Box::new(PacketZcReqWearEquipAck::from(buffer, packetver));
    }
    if buffer[0] == 0xd0 && buffer[1] == 0x08 {
        return Box::new(PacketZcReqWearEquipAck2::from(buffer, packetver));
    }
    if buffer[0] == 0xab && buffer[1] == 0x00 {
        return Box::new(PacketCzReqTakeoffEquip::from(buffer, packetver));
    }
    if buffer[0] == 0xac && buffer[1] == 0x00 {
        return Box::new(PacketZcReqTakeoffEquipAck::from(buffer, packetver));
    }
    if buffer[0] == 0xd1 && buffer[1] == 0x08 {
        return Box::new(PacketZcReqTakeoffEquipAck2::from(buffer, packetver));
    }
    if buffer[0] == 0xaf && buffer[1] == 0x00 {
        return Box::new(PacketZcItemThrowAck::from(buffer, packetver));
    }
    if buffer[0] == 0xb0 && buffer[1] == 0x00 {
        return Box::new(PacketZcParChange::from(buffer, packetver));
    }
    if buffer[0] == 0xb1 && buffer[1] == 0x00 {
        return Box::new(PacketZcLongparChange::from(buffer, packetver));
    }
    if buffer[0] == 0xb2 && buffer[1] == 0x00 {
        return Box::new(PacketCzRestart::from(buffer, packetver));
    }
    if buffer[0] == 0xb3 && buffer[1] == 0x00 {
        return Box::new(PacketZcRestartAck::from(buffer, packetver));
    }
    if buffer[0] == 0xb4 && buffer[1] == 0x00 {
        return Box::new(PacketZcSayDialog::from(buffer, packetver));
    }
    if buffer[0] == 0xb5 && buffer[1] == 0x00 {
        return Box::new(PacketZcWaitDialog::from(buffer, packetver));
    }
    if buffer[0] == 0xb6 && buffer[1] == 0x00 {
        return Box::new(PacketZcCloseDialog::from(buffer, packetver));
    }
    if buffer[0] == 0xb7 && buffer[1] == 0x00 {
        return Box::new(PacketZcMenuList::from(buffer, packetver));
    }
    if buffer[0] == 0xb8 && buffer[1] == 0x00 {
        return Box::new(PacketCzChooseMenu::from(buffer, packetver));
    }
    if buffer[0] == 0xb9 && buffer[1] == 0x00 {
        return Box::new(PacketCzReqNextScript::from(buffer, packetver));
    }
    if buffer[0] == 0xba && buffer[1] == 0x00 {
        return Box::new(PacketCzReqStatus::from(buffer, packetver));
    }
    if buffer[0] == 0xbb && buffer[1] == 0x00 {
        return Box::new(PacketCzStatusChange::from(buffer, packetver));
    }
    if buffer[0] == 0xbc && buffer[1] == 0x00 {
        return Box::new(PacketZcStatusChangeAck::from(buffer, packetver));
    }
    if buffer[0] == 0xbd && buffer[1] == 0x00 {
        return Box::new(PacketZcStatus::from(buffer, packetver));
    }
    if buffer[0] == 0xbe && buffer[1] == 0x00 {
        return Box::new(PacketZcStatusChange::from(buffer, packetver));
    }
    if buffer[0] == 0xbf && buffer[1] == 0x00 {
        return Box::new(PacketCzReqEmotion::from(buffer, packetver));
    }
    if buffer[0] == 0xc0 && buffer[1] == 0x00 {
        return Box::new(PacketZcEmotion::from(buffer, packetver));
    }
    if buffer[0] == 0xc1 && buffer[1] == 0x00 {
        return Box::new(PacketCzReqUserCount::from(buffer, packetver));
    }
    if buffer[0] == 0xc2 && buffer[1] == 0x00 {
        return Box::new(PacketZcUserCount::from(buffer, packetver));
    }
    if buffer[0] == 0xc3 && buffer[1] == 0x00 {
        return Box::new(PacketZcSpriteChange::from(buffer, packetver));
    }
    if buffer[0] == 0xc4 && buffer[1] == 0x00 {
        return Box::new(PacketZcSelectDealtype::from(buffer, packetver));
    }
    if buffer[0] == 0xc5 && buffer[1] == 0x00 {
        return Box::new(PacketCzAckSelectDealtype::from(buffer, packetver));
    }
    if buffer[0] == 0xc6 && buffer[1] == 0x00 {
        return Box::new(PacketZcPcPurchaseItemlist::from(buffer, packetver));
    }
    if buffer[0] == 0xc7 && buffer[1] == 0x00 {
        return Box::new(PacketZcPcSellItemlist::from(buffer, packetver));
    }
    if buffer[0] == 0xc8 && buffer[1] == 0x00 {
        return Box::new(PacketCzPcPurchaseItemlist::from(buffer, packetver));
    }
    if buffer[0] == 0xc9 && buffer[1] == 0x00 {
        return Box::new(PacketCzPcSellItemlist::from(buffer, packetver));
    }
    if buffer[0] == 0xca && buffer[1] == 0x00 {
        return Box::new(PacketZcPcPurchaseResult::from(buffer, packetver));
    }
    if buffer[0] == 0xcb && buffer[1] == 0x00 {
        return Box::new(PacketZcPcSellResult::from(buffer, packetver));
    }
    if buffer[0] == 0xcc && buffer[1] == 0x00 {
        return Box::new(PacketCzDisconnectCharacter::from(buffer, packetver));
    }
    if buffer[0] == 0xcd && buffer[1] == 0x00 {
        return Box::new(PacketZcAckDisconnectCharacter::from(buffer, packetver));
    }
    if buffer[0] == 0xce && buffer[1] == 0x00 {
        return Box::new(PacketCzDisconnectAllCharacter::from(buffer, packetver));
    }
    if buffer[0] == 0xcf && buffer[1] == 0x00 {
        return Box::new(PacketCzSettingWhisperPc::from(buffer, packetver));
    }
    if buffer[0] == 0xd0 && buffer[1] == 0x00 {
        return Box::new(PacketCzSettingWhisperState::from(buffer, packetver));
    }
    if buffer[0] == 0xd1 && buffer[1] == 0x00 {
        return Box::new(PacketZcSettingWhisperPc::from(buffer, packetver));
    }
    if buffer[0] == 0xd2 && buffer[1] == 0x00 {
        return Box::new(PacketZcSettingWhisperState::from(buffer, packetver));
    }
    if buffer[0] == 0xd3 && buffer[1] == 0x00 {
        return Box::new(PacketCzReqWhisperList::from(buffer, packetver));
    }
    if buffer[0] == 0xd4 && buffer[1] == 0x00 {
        return Box::new(PacketZcWhisperList::from(buffer, packetver));
    }
    if buffer[0] == 0xd5 && buffer[1] == 0x00 {
        return Box::new(PacketCzCreateChatroom::from(buffer, packetver));
    }
    if buffer[0] == 0xd6 && buffer[1] == 0x00 {
        return Box::new(PacketZcAckCreateChatroom::from(buffer, packetver));
    }
    if buffer[0] == 0xd7 && buffer[1] == 0x00 {
        return Box::new(PacketZcRoomNewentry::from(buffer, packetver));
    }
    if buffer[0] == 0xd8 && buffer[1] == 0x00 {
        return Box::new(PacketZcDestroyRoom::from(buffer, packetver));
    }
    if buffer[0] == 0xd9 && buffer[1] == 0x00 {
        return Box::new(PacketCzReqEnterRoom::from(buffer, packetver));
    }
    if buffer[0] == 0xda && buffer[1] == 0x00 {
        return Box::new(PacketZcRefuseEnterRoom::from(buffer, packetver));
    }
    if buffer[0] == 0xdb && buffer[1] == 0x00 {
        return Box::new(PacketZcEnterRoom::from(buffer, packetver));
    }
    if buffer[0] == 0xdc && buffer[1] == 0x00 {
        return Box::new(PacketZcMemberNewentry::from(buffer, packetver));
    }
    if buffer[0] == 0xdd && buffer[1] == 0x00 {
        return Box::new(PacketZcMemberExit::from(buffer, packetver));
    }
    if buffer[0] == 0xde && buffer[1] == 0x00 {
        return Box::new(PacketCzChangeChatroom::from(buffer, packetver));
    }
    if buffer[0] == 0xdf && buffer[1] == 0x00 {
        return Box::new(PacketZcChangeChatroom::from(buffer, packetver));
    }
    if buffer[0] == 0xe0 && buffer[1] == 0x00 {
        return Box::new(PacketCzReqRoleChange::from(buffer, packetver));
    }
    if buffer[0] == 0xe1 && buffer[1] == 0x00 {
        return Box::new(PacketZcRoleChange::from(buffer, packetver));
    }
    if buffer[0] == 0xe2 && buffer[1] == 0x00 {
        return Box::new(PacketCzReqExpelMember::from(buffer, packetver));
    }
    if buffer[0] == 0xe3 && buffer[1] == 0x00 {
        return Box::new(PacketCzExitRoom::from(buffer, packetver));
    }
    if buffer[0] == 0xe4 && buffer[1] == 0x00 {
        return Box::new(PacketCzReqExchangeItem::from(buffer, packetver));
    }
    if buffer[0] == 0xe5 && buffer[1] == 0x00 {
        return Box::new(PacketZcReqExchangeItem::from(buffer, packetver));
    }
    if buffer[0] == 0xe6 && buffer[1] == 0x00 {
        return Box::new(PacketCzAckExchangeItem::from(buffer, packetver));
    }
    if buffer[0] == 0xe7 && buffer[1] == 0x00 {
        return Box::new(PacketZcAckExchangeItem::from(buffer, packetver));
    }
    if buffer[0] == 0xe8 && buffer[1] == 0x00 {
        return Box::new(PacketCzAddExchangeItem::from(buffer, packetver));
    }
    if buffer[0] == 0xe9 && buffer[1] == 0x00 {
        return Box::new(PacketZcAddExchangeItem::from(buffer, packetver));
    }
    if buffer[0] == 0xea && buffer[1] == 0x00 {
        return Box::new(PacketZcAckAddExchangeItem::from(buffer, packetver));
    }
    if buffer[0] == 0xeb && buffer[1] == 0x00 {
        return Box::new(PacketCzConcludeExchangeItem::from(buffer, packetver));
    }
    if buffer[0] == 0xec && buffer[1] == 0x00 {
        return Box::new(PacketZcConcludeExchangeItem::from(buffer, packetver));
    }
    if buffer[0] == 0xed && buffer[1] == 0x00 {
        return Box::new(PacketCzCancelExchangeItem::from(buffer, packetver));
    }
    if buffer[0] == 0xee && buffer[1] == 0x00 {
        return Box::new(PacketZcCancelExchangeItem::from(buffer, packetver));
    }
    if buffer[0] == 0xef && buffer[1] == 0x00 {
        return Box::new(PacketCzExecExchangeItem::from(buffer, packetver));
    }
    if buffer[0] == 0xf0 && buffer[1] == 0x00 {
        return Box::new(PacketZcExecExchangeItem::from(buffer, packetver));
    }
    if buffer[0] == 0xf1 && buffer[1] == 0x00 {
        return Box::new(PacketZcExchangeitemUndo::from(buffer, packetver));
    }
    if buffer[0] == 0xf2 && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyStoreitemCountinfo::from(buffer, packetver));
    }
    if buffer[0] == 0xf3 && buffer[1] == 0x00 {
        return Box::new(PacketCzPlayerChat::from(buffer, packetver));
    }
    if buffer[0] == 0xf4 && buffer[1] == 0x00 {
        return Box::new(PacketZcAddItemToStore::from(buffer, packetver));
    }
    if buffer[0] == 0xf5 && buffer[1] == 0x00 {
        return Box::new(PacketCzMoveItemFromStoreToBody::from(buffer, packetver));
    }
    if buffer[0] == 0xf6 && buffer[1] == 0x00 {
        return Box::new(PacketZcDeleteItemFromStore::from(buffer, packetver));
    }
    if buffer[0] == 0xf7 && buffer[1] == 0x00 {
        return Box::new(PacketCzCloseStore::from(buffer, packetver));
    }
    if buffer[0] == 0xf8 && buffer[1] == 0x00 {
        return Box::new(PacketZcCloseStore::from(buffer, packetver));
    }
    if buffer[0] == 0xf9 && buffer[1] == 0x00 {
        return Box::new(PacketCzMakeGroup::from(buffer, packetver));
    }
    if buffer[0] == 0xfa && buffer[1] == 0x00 {
        return Box::new(PacketZcAckMakeGroup::from(buffer, packetver));
    }
    if buffer[0] == 0xfb && buffer[1] == 0x00 {
        return Box::new(PacketZcGroupList::from(buffer, packetver));
    }
    if buffer[0] == 0xfc && buffer[1] == 0x00 {
        return Box::new(PacketCzReqJoinGroup::from(buffer, packetver));
    }
    if buffer[0] == 0xfd && buffer[1] == 0x00 {
        return Box::new(PacketZcAckReqJoinGroup::from(buffer, packetver));
    }
    if buffer[0] == 0xfe && buffer[1] == 0x00 {
        return Box::new(PacketZcReqJoinGroup::from(buffer, packetver));
    }
    if buffer[0] == 0xff && buffer[1] == 0x00 {
        return Box::new(PacketCzJoinGroup::from(buffer, packetver));
    }
    if buffer[0] == 0x00 && buffer[1] == 0x01 {
        return Box::new(PacketCzReqLeaveGroup::from(buffer, packetver));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x01 {
        return Box::new(PacketZcGroupinfoChange::from(buffer, packetver));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x01 {
        return Box::new(PacketCzChangeGroupexpoption::from(buffer, packetver));
    }
    if buffer[0] == 0x03 && buffer[1] == 0x01 {
        return Box::new(PacketCzReqExpelGroupMember::from(buffer, packetver));
    }
    if buffer[0] == 0x04 && buffer[1] == 0x01 {
        return Box::new(PacketZcAddMemberToGroup::from(buffer, packetver));
    }
    if buffer[0] == 0x05 && buffer[1] == 0x01 {
        return Box::new(PacketZcDeleteMemberFromGroup::from(buffer, packetver));
    }
    if buffer[0] == 0x06 && buffer[1] == 0x01 {
        return Box::new(PacketZcNotifyHpToGroupm::from(buffer, packetver));
    }
    if buffer[0] == 0x07 && buffer[1] == 0x01 {
        return Box::new(PacketZcNotifyPositionToGroupm::from(buffer, packetver));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x01 {
        return Box::new(PacketCzRequestChatParty::from(buffer, packetver));
    }
    if buffer[0] == 0x09 && buffer[1] == 0x01 {
        return Box::new(PacketZcNotifyChatParty::from(buffer, packetver));
    }
    if buffer[0] == 0x0a && buffer[1] == 0x01 {
        return Box::new(PacketZcMvpGettingItem::from(buffer, packetver));
    }
    if buffer[0] == 0x0b && buffer[1] == 0x01 {
        return Box::new(PacketZcMvpGettingSpecialExp::from(buffer, packetver));
    }
    if buffer[0] == 0x0c && buffer[1] == 0x01 {
        return Box::new(PacketZcMvp::from(buffer, packetver));
    }
    if buffer[0] == 0x0d && buffer[1] == 0x01 {
        return Box::new(PacketZcThrowMvpitem::from(buffer, packetver));
    }
    if buffer[0] == 0x0e && buffer[1] == 0x01 {
        return Box::new(PacketZcSkillinfoUpdate::from(buffer, packetver));
    }
    if buffer[0] == 0x0f && buffer[1] == 0x01 {
        return Box::new(PacketZcSkillinfoList::from(buffer, packetver));
    }
    if buffer[0] == 0x10 && buffer[1] == 0x01 {
        return Box::new(PacketZcAckTouseskill::from(buffer, packetver));
    }
    if buffer[0] == 0x11 && buffer[1] == 0x01 {
        return Box::new(PacketZcAddSkill::from(buffer, packetver));
    }
    if buffer[0] == 0x12 && buffer[1] == 0x01 {
        return Box::new(PacketCzUpgradeSkilllevel::from(buffer, packetver));
    }
    if buffer[0] == 0x13 && buffer[1] == 0x01 {
        return Box::new(PacketCzUseSkill::from(buffer, packetver));
    }
    if buffer[0] == 0x14 && buffer[1] == 0x01 {
        return Box::new(PacketZcNotifySkill::from(buffer, packetver));
    }
    if buffer[0] == 0x15 && buffer[1] == 0x01 {
        return Box::new(PacketZcNotifySkillPosition::from(buffer, packetver));
    }
    if buffer[0] == 0x16 && buffer[1] == 0x01 {
        return Box::new(PacketCzUseSkillToground::from(buffer, packetver));
    }
    if buffer[0] == 0x17 && buffer[1] == 0x01 {
        return Box::new(PacketZcNotifyGroundskill::from(buffer, packetver));
    }
    if buffer[0] == 0x18 && buffer[1] == 0x01 {
        return Box::new(PacketCzCancelLockon::from(buffer, packetver));
    }
    if buffer[0] == 0x19 && buffer[1] == 0x01 {
        return Box::new(PacketZcStateChange::from(buffer, packetver));
    }
    if buffer[0] == 0x1a && buffer[1] == 0x01 {
        return Box::new(PacketZcUseSkill::from(buffer, packetver));
    }
    if buffer[0] == 0x1b && buffer[1] == 0x01 {
        return Box::new(PacketCzSelectWarppoint::from(buffer, packetver));
    }
    if buffer[0] == 0x1c && buffer[1] == 0x01 {
        return Box::new(PacketZcWarplist::from(buffer, packetver));
    }
    if buffer[0] == 0x1d && buffer[1] == 0x01 {
        return Box::new(PacketCzRememberWarppoint::from(buffer, packetver));
    }
    if buffer[0] == 0x1e && buffer[1] == 0x01 {
        return Box::new(PacketZcAckRememberWarppoint::from(buffer, packetver));
    }
    if buffer[0] == 0x1f && buffer[1] == 0x01 {
        return Box::new(PacketZcSkillEntry::from(buffer, packetver));
    }
    if buffer[0] == 0x20 && buffer[1] == 0x01 {
        return Box::new(PacketZcSkillDisappear::from(buffer, packetver));
    }
    if buffer[0] == 0x21 && buffer[1] == 0x01 {
        return Box::new(PacketZcNotifyCartitemCountinfo::from(buffer, packetver));
    }
    if buffer[0] == 0x22 && buffer[1] == 0x01 {
        return Box::new(PacketZcCartEquipmentItemlist::from(buffer, packetver));
    }
    if buffer[0] == 0x23 && buffer[1] == 0x01 {
        return Box::new(PacketZcCartNormalItemlist::from(buffer, packetver));
    }
    if buffer[0] == 0x24 && buffer[1] == 0x01 {
        return Box::new(PacketZcAddItemToCart::from(buffer, packetver));
    }
    if buffer[0] == 0x25 && buffer[1] == 0x01 {
        return Box::new(PacketZcDeleteItemFromCart::from(buffer, packetver));
    }
    if buffer[0] == 0x26 && buffer[1] == 0x01 {
        return Box::new(PacketCzMoveItemFromBodyToCart::from(buffer, packetver));
    }
    if buffer[0] == 0x27 && buffer[1] == 0x01 {
        return Box::new(PacketCzMoveItemFromCartToBody::from(buffer, packetver));
    }
    if buffer[0] == 0x28 && buffer[1] == 0x01 {
        return Box::new(PacketCzMoveItemFromStoreToCart::from(buffer, packetver));
    }
    if buffer[0] == 0x29 && buffer[1] == 0x01 {
        return Box::new(PacketCzMoveItemFromCartToStore::from(buffer, packetver));
    }
    if buffer[0] == 0x2a && buffer[1] == 0x01 {
        return Box::new(PacketCzReqCartoff::from(buffer, packetver));
    }
    if buffer[0] == 0x2b && buffer[1] == 0x01 {
        return Box::new(PacketZcCartoff::from(buffer, packetver));
    }
    if buffer[0] == 0x2c && buffer[1] == 0x01 {
        return Box::new(PacketZcAckAdditemToCart::from(buffer, packetver));
    }
    if buffer[0] == 0x2d && buffer[1] == 0x01 {
        return Box::new(PacketZcOpenstore::from(buffer, packetver));
    }
    if buffer[0] == 0x2e && buffer[1] == 0x01 {
        return Box::new(PacketCzReqClosestore::from(buffer, packetver));
    }
    if buffer[0] == 0x2f && buffer[1] == 0x01 {
        return Box::new(PacketCzReqOpenstore::from(buffer, packetver));
    }
    if buffer[0] == 0x30 && buffer[1] == 0x01 {
        return Box::new(PacketCzReqBuyFrommc::from(buffer, packetver));
    }
    if buffer[0] == 0x31 && buffer[1] == 0x01 {
        return Box::new(PacketZcStoreEntry::from(buffer, packetver));
    }
    if buffer[0] == 0x32 && buffer[1] == 0x01 {
        return Box::new(PacketZcDisappearEntry::from(buffer, packetver));
    }
    if buffer[0] == 0x33 && buffer[1] == 0x01 {
        return Box::new(PacketZcPcPurchaseItemlistFrommc::from(buffer, packetver));
    }
    if buffer[0] == 0x34 && buffer[1] == 0x01 {
        return Box::new(PacketCzPcPurchaseItemlistFrommc::from(buffer, packetver));
    }
    if buffer[0] == 0x35 && buffer[1] == 0x01 {
        return Box::new(PacketZcPcPurchaseResultFrommc::from(buffer, packetver));
    }
    if buffer[0] == 0x36 && buffer[1] == 0x01 {
        return Box::new(PacketZcPcPurchaseMyitemlist::from(buffer, packetver));
    }
    if buffer[0] == 0x37 && buffer[1] == 0x01 {
        return Box::new(PacketZcDeleteitemFromMcstore::from(buffer, packetver));
    }
    if buffer[0] == 0x38 && buffer[1] == 0x01 {
        return Box::new(PacketCzPkmodeChange::from(buffer, packetver));
    }
    if buffer[0] == 0x39 && buffer[1] == 0x01 {
        return Box::new(PacketZcAttackFailureForDistance::from(buffer, packetver));
    }
    if buffer[0] == 0x3a && buffer[1] == 0x01 {
        return Box::new(PacketZcAttackRange::from(buffer, packetver));
    }
    if buffer[0] == 0x3b && buffer[1] == 0x01 {
        return Box::new(PacketZcActionFailure::from(buffer, packetver));
    }
    if buffer[0] == 0x3c && buffer[1] == 0x01 {
        return Box::new(PacketZcEquipArrow::from(buffer, packetver));
    }
    if buffer[0] == 0x3d && buffer[1] == 0x01 {
        return Box::new(PacketZcRecovery::from(buffer, packetver));
    }
    if buffer[0] == 0x3e && buffer[1] == 0x01 {
        return Box::new(PacketZcUseskillAck::from(buffer, packetver));
    }
    if buffer[0] == 0x3f && buffer[1] == 0x01 {
        return Box::new(PacketCzItemCreate::from(buffer, packetver));
    }
    if buffer[0] == 0x40 && buffer[1] == 0x01 {
        return Box::new(PacketCzMovetoMap::from(buffer, packetver));
    }
    if buffer[0] == 0x41 && buffer[1] == 0x01 {
        return Box::new(PacketZcStatusValues::from(buffer, packetver));
    }
    if buffer[0] == 0x42 && buffer[1] == 0x01 {
        return Box::new(PacketZcOpenEditdlg::from(buffer, packetver));
    }
    if buffer[0] == 0x43 && buffer[1] == 0x01 {
        return Box::new(PacketCzInputEditdlg::from(buffer, packetver));
    }
    if buffer[0] == 0x44 && buffer[1] == 0x01 {
        return Box::new(PacketZcCompass::from(buffer, packetver));
    }
    if buffer[0] == 0x45 && buffer[1] == 0x01 {
        return Box::new(PacketZcShowImage::from(buffer, packetver));
    }
    if buffer[0] == 0x46 && buffer[1] == 0x01 {
        return Box::new(PacketCzCloseDialog::from(buffer, packetver));
    }
    if buffer[0] == 0x47 && buffer[1] == 0x01 {
        return Box::new(PacketZcAutorunSkill::from(buffer, packetver));
    }
    if buffer[0] == 0x48 && buffer[1] == 0x01 {
        return Box::new(PacketZcResurrection::from(buffer, packetver));
    }
    if buffer[0] == 0x49 && buffer[1] == 0x01 {
        return Box::new(PacketCzReqGiveMannerPoint::from(buffer, packetver));
    }
    if buffer[0] == 0x4a && buffer[1] == 0x01 {
        return Box::new(PacketZcAckGiveMannerPoint::from(buffer, packetver));
    }
    if buffer[0] == 0x4b && buffer[1] == 0x01 {
        return Box::new(PacketZcNotifyMannerPointGiven::from(buffer, packetver));
    }
    if buffer[0] == 0x4c && buffer[1] == 0x01 {
        return Box::new(PacketZcMyguildBasicInfo::from(buffer, packetver));
    }
    if buffer[0] == 0x4d && buffer[1] == 0x01 {
        return Box::new(PacketCzReqGuildMenuinterface::from(buffer, packetver));
    }
    if buffer[0] == 0x4e && buffer[1] == 0x01 {
        return Box::new(PacketZcAckGuildMenuinterface::from(buffer, packetver));
    }
    if buffer[0] == 0x4f && buffer[1] == 0x01 {
        return Box::new(PacketCzReqGuildMenu::from(buffer, packetver));
    }
    if buffer[0] == 0x50 && buffer[1] == 0x01 {
        return Box::new(PacketZcGuildInfo::from(buffer, packetver));
    }
    if buffer[0] == 0x51 && buffer[1] == 0x01 {
        return Box::new(PacketCzReqGuildEmblemImg::from(buffer, packetver));
    }
    if buffer[0] == 0x52 && buffer[1] == 0x01 {
        return Box::new(PacketZcGuildEmblemImg::from(buffer, packetver));
    }
    if buffer[0] == 0x53 && buffer[1] == 0x01 {
        return Box::new(PacketCzRegisterGuildEmblemImg::from(buffer, packetver));
    }
    if buffer[0] == 0x54 && buffer[1] == 0x01 {
        return Box::new(PacketZcMembermgrInfo::from(buffer, packetver));
    }
    if buffer[0] == 0x55 && buffer[1] == 0x01 {
        return Box::new(PacketCzReqChangeMemberpos::from(buffer, packetver));
    }
    if buffer[0] == 0x56 && buffer[1] == 0x01 {
        return Box::new(PacketZcAckReqChangeMembers::from(buffer, packetver));
    }
    if buffer[0] == 0x57 && buffer[1] == 0x01 {
        return Box::new(PacketCzReqOpenMemberInfo::from(buffer, packetver));
    }
    if buffer[0] == 0x58 && buffer[1] == 0x01 {
        return Box::new(PacketZcAckOpenMemberInfo::from(buffer, packetver));
    }
    if buffer[0] == 0x59 && buffer[1] == 0x01 {
        return Box::new(PacketCzReqLeaveGuild::from(buffer, packetver));
    }
    if buffer[0] == 0x5a && buffer[1] == 0x01 {
        return Box::new(PacketZcAckLeaveGuild::from(buffer, packetver));
    }
    if buffer[0] == 0x5b && buffer[1] == 0x01 {
        return Box::new(PacketCzReqBanGuild::from(buffer, packetver));
    }
    if buffer[0] == 0x5c && buffer[1] == 0x01 {
        return Box::new(PacketZcAckBanGuild::from(buffer, packetver));
    }
    if buffer[0] == 0x5d && buffer[1] == 0x01 {
        return Box::new(PacketCzReqDisorganizeGuild::from(buffer, packetver));
    }
    if buffer[0] == 0x5e && buffer[1] == 0x01 {
        return Box::new(PacketZcAckDisorganizeGuildResult::from(buffer, packetver));
    }
    if buffer[0] == 0x5f && buffer[1] == 0x01 {
        return Box::new(PacketZcAckDisorganizeGuild::from(buffer, packetver));
    }
    if buffer[0] == 0x60 && buffer[1] == 0x01 {
        return Box::new(PacketZcPositionInfo::from(buffer, packetver));
    }
    if buffer[0] == 0x61 && buffer[1] == 0x01 {
        return Box::new(PacketCzRegChangeGuildPositioninfo::from(buffer, packetver));
    }
    if buffer[0] == 0x62 && buffer[1] == 0x01 {
        return Box::new(PacketZcGuildSkillinfo::from(buffer, packetver));
    }
    if buffer[0] == 0x63 && buffer[1] == 0x01 {
        return Box::new(PacketZcBanList::from(buffer, packetver));
    }
    if buffer[0] == 0x64 && buffer[1] == 0x01 {
        return Box::new(PacketZcOtherGuildList::from(buffer, packetver));
    }
    if buffer[0] == 0x65 && buffer[1] == 0x01 {
        return Box::new(PacketCzReqMakeGuild::from(buffer, packetver));
    }
    if buffer[0] == 0x66 && buffer[1] == 0x01 {
        return Box::new(PacketZcPositionIdNameInfo::from(buffer, packetver));
    }
    if buffer[0] == 0x67 && buffer[1] == 0x01 {
        return Box::new(PacketZcResultMakeGuild::from(buffer, packetver));
    }
    if buffer[0] == 0x68 && buffer[1] == 0x01 {
        return Box::new(PacketCzReqJoinGuild::from(buffer, packetver));
    }
    if buffer[0] == 0x69 && buffer[1] == 0x01 {
        return Box::new(PacketZcAckReqJoinGuild::from(buffer, packetver));
    }
    if buffer[0] == 0x6a && buffer[1] == 0x01 {
        return Box::new(PacketZcReqJoinGuild::from(buffer, packetver));
    }
    if buffer[0] == 0x6b && buffer[1] == 0x01 {
        return Box::new(PacketCzJoinGuild::from(buffer, packetver));
    }
    if buffer[0] == 0x6c && buffer[1] == 0x01 {
        return Box::new(PacketZcUpdateGdid::from(buffer, packetver));
    }
    if buffer[0] == 0x6d && buffer[1] == 0x01 {
        return Box::new(PacketZcUpdateCharstat::from(buffer, packetver));
    }
    if buffer[0] == 0x6e && buffer[1] == 0x01 {
        return Box::new(PacketCzGuildNotice::from(buffer, packetver));
    }
    if buffer[0] == 0x6f && buffer[1] == 0x01 {
        return Box::new(PacketZcGuildNotice::from(buffer, packetver));
    }
    if buffer[0] == 0x70 && buffer[1] == 0x01 {
        return Box::new(PacketCzReqAllyGuild::from(buffer, packetver));
    }
    if buffer[0] == 0x71 && buffer[1] == 0x01 {
        return Box::new(PacketZcReqAllyGuild::from(buffer, packetver));
    }
    if buffer[0] == 0x72 && buffer[1] == 0x01 {
        return Box::new(PacketCzAllyGuild::from(buffer, packetver));
    }
    if buffer[0] == 0x73 && buffer[1] == 0x01 {
        return Box::new(PacketZcAckReqAllyGuild::from(buffer, packetver));
    }
    if buffer[0] == 0x74 && buffer[1] == 0x01 {
        return Box::new(PacketZcAckChangeGuildPositioninfo::from(buffer, packetver));
    }
    if buffer[0] == 0x75 && buffer[1] == 0x01 {
        return Box::new(PacketCzReqGuildMemberInfo::from(buffer, packetver));
    }
    if buffer[0] == 0x76 && buffer[1] == 0x01 {
        return Box::new(PacketZcAckGuildMemberInfo::from(buffer, packetver));
    }
    if buffer[0] == 0x77 && buffer[1] == 0x01 {
        return Box::new(PacketZcItemidentifyList::from(buffer, packetver));
    }
    if buffer[0] == 0x78 && buffer[1] == 0x01 {
        return Box::new(PacketCzReqItemidentify::from(buffer, packetver));
    }
    if buffer[0] == 0x79 && buffer[1] == 0x01 {
        return Box::new(PacketZcAckItemidentify::from(buffer, packetver));
    }
    if buffer[0] == 0x7a && buffer[1] == 0x01 {
        return Box::new(PacketCzReqItemcompositionList::from(buffer, packetver));
    }
    if buffer[0] == 0x7b && buffer[1] == 0x01 {
        return Box::new(PacketZcItemcompositionList::from(buffer, packetver));
    }
    if buffer[0] == 0x7c && buffer[1] == 0x01 {
        return Box::new(PacketCzReqItemcomposition::from(buffer, packetver));
    }
    if buffer[0] == 0x7d && buffer[1] == 0x01 {
        return Box::new(PacketZcAckItemcomposition::from(buffer, packetver));
    }
    if buffer[0] == 0x7e && buffer[1] == 0x01 {
        return Box::new(PacketCzGuildChat::from(buffer, packetver));
    }
    if buffer[0] == 0x7f && buffer[1] == 0x01 {
        return Box::new(PacketZcGuildChat::from(buffer, packetver));
    }
    if buffer[0] == 0x80 && buffer[1] == 0x01 {
        return Box::new(PacketCzReqHostileGuild::from(buffer, packetver));
    }
    if buffer[0] == 0x81 && buffer[1] == 0x01 {
        return Box::new(PacketZcAckReqHostileGuild::from(buffer, packetver));
    }
    if buffer[0] == 0x82 && buffer[1] == 0x01 {
        return Box::new(PacketZcMemberAdd::from(buffer, packetver));
    }
    if buffer[0] == 0x83 && buffer[1] == 0x01 {
        return Box::new(PacketCzReqDeleteRelatedGuild::from(buffer, packetver));
    }
    if buffer[0] == 0x84 && buffer[1] == 0x01 {
        return Box::new(PacketZcDeleteRelatedGuild::from(buffer, packetver));
    }
    if buffer[0] == 0x85 && buffer[1] == 0x01 {
        return Box::new(PacketZcAddRelatedGuild::from(buffer, packetver));
    }
    if buffer[0] == 0x86 && buffer[1] == 0x01 {
        return Box::new(PacketCollectordead::from(buffer, packetver));
    }
    if buffer[0] == 0x87 && buffer[1] == 0x01 {
        return Box::new(PacketPing::from(buffer, packetver));
    }
    if buffer[0] == 0x88 && buffer[1] == 0x01 {
        return Box::new(PacketZcAckItemrefining::from(buffer, packetver));
    }
    if buffer[0] == 0x89 && buffer[1] == 0x01 {
        return Box::new(PacketZcNotifyMapinfo::from(buffer, packetver));
    }
    if buffer[0] == 0x8a && buffer[1] == 0x01 {
        return Box::new(PacketCzReqDisconnect::from(buffer, packetver));
    }
    if buffer[0] == 0x8b && buffer[1] == 0x01 {
        return Box::new(PacketZcAckReqDisconnect::from(buffer, packetver));
    }
    if buffer[0] == 0x8c && buffer[1] == 0x01 {
        return Box::new(PacketZcMonsterInfo::from(buffer, packetver));
    }
    if buffer[0] == 0x8d && buffer[1] == 0x01 {
        return Box::new(PacketZcMakableitemlist::from(buffer, packetver));
    }
    if buffer[0] == 0x8e && buffer[1] == 0x01 {
        return Box::new(PacketCzReqmakingitem::from(buffer, packetver));
    }
    if buffer[0] == 0x8f && buffer[1] == 0x01 {
        return Box::new(PacketZcAckReqmakingitem::from(buffer, packetver));
    }
    if buffer[0] == 0x90 && buffer[1] == 0x01 {
        return Box::new(PacketCzUseSkillTogroundWithtalkbox::from(buffer, packetver));
    }
    if buffer[0] == 0x91 && buffer[1] == 0x01 {
        return Box::new(PacketZcTalkboxChatcontents::from(buffer, packetver));
    }
    if buffer[0] == 0x92 && buffer[1] == 0x01 {
        return Box::new(PacketZcUpdateMapinfo::from(buffer, packetver));
    }
    if buffer[0] == 0x93 && buffer[1] == 0x01 {
        return Box::new(PacketCzReqnameBygid::from(buffer, packetver));
    }
    if buffer[0] == 0x94 && buffer[1] == 0x01 {
        return Box::new(PacketZcAckReqnameBygid::from(buffer, packetver));
    }
    if buffer[0] == 0x95 && buffer[1] == 0x01 {
        return Box::new(PacketZcAckReqnameall::from(buffer, packetver));
    }
    if buffer[0] == 0x96 && buffer[1] == 0x01 {
        return Box::new(PacketZcMsgStateChange::from(buffer, packetver));
    }
    if buffer[0] == 0x97 && buffer[1] == 0x01 {
        return Box::new(PacketCzReset::from(buffer, packetver));
    }
    if buffer[0] == 0x98 && buffer[1] == 0x01 {
        return Box::new(PacketCzChangeMaptype::from(buffer, packetver));
    }
    if buffer[0] == 0x99 && buffer[1] == 0x01 {
        return Box::new(PacketZcNotifyMapproperty::from(buffer, packetver));
    }
    if buffer[0] == 0x9a && buffer[1] == 0x01 {
        return Box::new(PacketZcNotifyRanking::from(buffer, packetver));
    }
    if buffer[0] == 0x9b && buffer[1] == 0x01 {
        return Box::new(PacketZcNotifyEffect::from(buffer, packetver));
    }
    if buffer[0] == 0x9d && buffer[1] == 0x01 {
        return Box::new(PacketCzChangeEffectstate::from(buffer, packetver));
    }
    if buffer[0] == 0x9e && buffer[1] == 0x01 {
        return Box::new(PacketZcStartCapture::from(buffer, packetver));
    }
    if buffer[0] == 0x9f && buffer[1] == 0x01 {
        return Box::new(PacketCzTrycaptureMonster::from(buffer, packetver));
    }
    if buffer[0] == 0xa0 && buffer[1] == 0x01 {
        return Box::new(PacketZcTrycaptureMonster::from(buffer, packetver));
    }
    if buffer[0] == 0xa1 && buffer[1] == 0x01 {
        return Box::new(PacketCzCommandPet::from(buffer, packetver));
    }
    if buffer[0] == 0xa2 && buffer[1] == 0x01 {
        return Box::new(PacketZcPropertyPet::from(buffer, packetver));
    }
    if buffer[0] == 0xa3 && buffer[1] == 0x01 {
        return Box::new(PacketZcFeedPet::from(buffer, packetver));
    }
    if buffer[0] == 0xa4 && buffer[1] == 0x01 {
        return Box::new(PacketZcChangestatePet::from(buffer, packetver));
    }
    if buffer[0] == 0xa5 && buffer[1] == 0x01 {
        return Box::new(PacketCzRenamePet::from(buffer, packetver));
    }
    if buffer[0] == 0xa6 && buffer[1] == 0x01 {
        return Box::new(PacketZcPeteggList::from(buffer, packetver));
    }
    if buffer[0] == 0xa7 && buffer[1] == 0x01 {
        return Box::new(PacketCzSelectPetegg::from(buffer, packetver));
    }
    if buffer[0] == 0xa8 && buffer[1] == 0x01 {
        return Box::new(PacketCzPeteggInfo::from(buffer, packetver));
    }
    if buffer[0] == 0xa9 && buffer[1] == 0x01 {
        return Box::new(PacketCzPetAct::from(buffer, packetver));
    }
    if buffer[0] == 0xaa && buffer[1] == 0x01 {
        return Box::new(PacketZcPetAct::from(buffer, packetver));
    }
    if buffer[0] == 0xab && buffer[1] == 0x01 {
        return Box::new(PacketZcParChangeUser::from(buffer, packetver));
    }
    if buffer[0] == 0xac && buffer[1] == 0x01 {
        return Box::new(PacketZcSkillUpdate::from(buffer, packetver));
    }
    if buffer[0] == 0xad && buffer[1] == 0x01 {
        return Box::new(PacketZcMakingarrowList::from(buffer, packetver));
    }
    if buffer[0] == 0xae && buffer[1] == 0x01 {
        return Box::new(PacketCzReqMakingarrow::from(buffer, packetver));
    }
    if buffer[0] == 0xaf && buffer[1] == 0x01 {
        return Box::new(PacketCzReqChangecart::from(buffer, packetver));
    }
    if buffer[0] == 0xb0 && buffer[1] == 0x01 {
        return Box::new(PacketZcNpcspriteChange::from(buffer, packetver));
    }
    if buffer[0] == 0xb1 && buffer[1] == 0x01 {
        return Box::new(PacketZcShowdigit::from(buffer, packetver));
    }
    if buffer[0] == 0xb2 && buffer[1] == 0x01 {
        return Box::new(PacketCzReqOpenstore2::from(buffer, packetver));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xb3 {
        return Box::new(PacketZcShowImage2::from(buffer, packetver));
    }
    if buffer[0] == 0xb4 && buffer[1] == 0x01 {
        return Box::new(PacketZcChangeGuild::from(buffer, packetver));
    }
    if buffer[0] == 0xb5 && buffer[1] == 0x01 {
        return Box::new(PacketScBillingInfo::from(buffer, packetver));
    }
    if buffer[0] == 0xb6 && buffer[1] == 0x01 {
        return Box::new(PacketZcGuildInfo2::from(buffer, packetver));
    }
    if buffer[0] == 0xb7 && buffer[1] == 0x01 {
        return Box::new(PacketCzGuildZeny::from(buffer, packetver));
    }
    if buffer[0] == 0xb8 && buffer[1] == 0x01 {
        return Box::new(PacketZcGuildZenyAck::from(buffer, packetver));
    }
    if buffer[0] == 0xb9 && buffer[1] == 0x01 {
        return Box::new(PacketZcDispel::from(buffer, packetver));
    }
    if buffer[0] == 0xba && buffer[1] == 0x01 {
        return Box::new(PacketCzRemoveAid::from(buffer, packetver));
    }
    if buffer[0] == 0xbb && buffer[1] == 0x01 {
        return Box::new(PacketCzShift::from(buffer, packetver));
    }
    if buffer[0] == 0xbc && buffer[1] == 0x01 {
        return Box::new(PacketCzRecall::from(buffer, packetver));
    }
    if buffer[0] == 0xbd && buffer[1] == 0x01 {
        return Box::new(PacketCzRecallGid::from(buffer, packetver));
    }
    if buffer[0] == 0xbe && buffer[1] == 0x01 {
        return Box::new(PacketAcAskPngameroom::from(buffer, packetver));
    }
    if buffer[0] == 0xbf && buffer[1] == 0x01 {
        return Box::new(PacketCaReplyPngameroom::from(buffer, packetver));
    }
    if buffer[0] == 0xc0 && buffer[1] == 0x01 {
        return Box::new(PacketCzReqRemaintime::from(buffer, packetver));
    }
    if buffer[0] == 0xc1 && buffer[1] == 0x01 {
        return Box::new(PacketZcReplyRemaintime::from(buffer, packetver));
    }
    if buffer[0] == 0xc2 && buffer[1] == 0x01 {
        return Box::new(PacketZcInfoRemaintime::from(buffer, packetver));
    }
    if buffer[0] == 0xc3 && buffer[1] == 0x01 {
        return Box::new(PacketZcBroadcast2::from(buffer, packetver));
    }
    if buffer[0] == 0xc4 && buffer[1] == 0x01 {
        return Box::new(PacketZcAddItemToStore2::from(buffer, packetver));
    }
    if buffer[0] == 0xc5 && buffer[1] == 0x01 {
        return Box::new(PacketZcAddItemToCart2::from(buffer, packetver));
    }
    if buffer[0] == 0xc6 && buffer[1] == 0x01 {
        return Box::new(PacketCsReqEncryption::from(buffer, packetver));
    }
    if buffer[0] == 0xc7 && buffer[1] == 0x01 {
        return Box::new(PacketScAckEncryption::from(buffer, packetver));
    }
    if buffer[0] == 0xc8 && buffer[1] == 0x01 {
        return Box::new(PacketZcUseItemAck2::from(buffer, packetver));
    }
    if buffer[0] == 0xc9 && buffer[1] == 0x01 {
        return Box::new(PacketZcSkillEntry2::from(buffer, packetver));
    }
    if buffer[0] == 0xca && buffer[1] == 0x01 {
        return Box::new(PacketCzReqmakinghomun::from(buffer, packetver));
    }
    if buffer[0] == 0xcb && buffer[1] == 0x01 {
        return Box::new(PacketCzMonsterTalk::from(buffer, packetver));
    }
    if buffer[0] == 0xcc && buffer[1] == 0x01 {
        return Box::new(PacketZcMonsterTalk::from(buffer, packetver));
    }
    if buffer[0] == 0xcd && buffer[1] == 0x01 {
        return Box::new(PacketZcAutospelllist::from(buffer, packetver));
    }
    if buffer[0] == 0xce && buffer[1] == 0x01 {
        return Box::new(PacketCzSelectautospell::from(buffer, packetver));
    }
    if buffer[0] == 0xcf && buffer[1] == 0x01 {
        return Box::new(PacketZcDevotionlist::from(buffer, packetver));
    }
    if buffer[0] == 0xd0 && buffer[1] == 0x01 {
        return Box::new(PacketZcSpirits::from(buffer, packetver));
    }
    if buffer[0] == 0xd1 && buffer[1] == 0x01 {
        return Box::new(PacketZcBladestop::from(buffer, packetver));
    }
    if buffer[0] == 0xd2 && buffer[1] == 0x01 {
        return Box::new(PacketZcCombodelay::from(buffer, packetver));
    }
    if buffer[0] == 0xd3 && buffer[1] == 0x01 {
        return Box::new(PacketZcSound::from(buffer, packetver));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xd4 {
        return Box::new(PacketZcOpenEditdlgstr::from(buffer, packetver));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xd5 {
        return Box::new(PacketCzInputEditdlgstr::from(buffer, packetver));
    }
    if buffer[0] == 0xd6 && buffer[1] == 0x01 {
        return Box::new(PacketZcNotifyMaptypeproperty2::from(buffer, packetver));
    }
    if buffer[0] == 0xd7 && buffer[1] == 0x01 {
        return Box::new(PacketZcSpriteChange2::from(buffer, packetver));
    }
    if buffer[0] == 0xd8 && buffer[1] == 0x01 {
        return Box::new(PacketZcNotifyStandentry2::from(buffer, packetver));
    }
    if buffer[0] == 0xd9 && buffer[1] == 0x01 {
        return Box::new(PacketZcNotifyNewentry2::from(buffer, packetver));
    }
    if buffer[0] == 0xda && buffer[1] == 0x01 {
        return Box::new(PacketZcNotifyMoveentry2::from(buffer, packetver));
    }
    if buffer[0] == 0xdb && buffer[1] == 0x01 {
        return Box::new(PacketCaReqHash::from(buffer, packetver));
    }
    if buffer[0] == 0xdc && buffer[1] == 0x01 {
        return Box::new(PacketAcAckHash::from(buffer, packetver));
    }
    if buffer[0] == 0xdd && buffer[1] == 0x01 {
        return Box::new(PacketCaLogin2::from(buffer, packetver));
    }
    if buffer[0] == 0xde && buffer[1] == 0x01 {
        return Box::new(PacketZcNotifySkill2::from(buffer, packetver));
    }
    if buffer[0] == 0xdf && buffer[1] == 0x01 {
        return Box::new(PacketCzReqAccountname::from(buffer, packetver));
    }
    if buffer[0] == 0xe0 && buffer[1] == 0x01 {
        return Box::new(PacketZcAckAccountname::from(buffer, packetver));
    }
    if buffer[0] == 0xe1 && buffer[1] == 0x01 {
        return Box::new(PacketZcSpirits2::from(buffer, packetver));
    }
    if buffer[0] == 0xe2 && buffer[1] == 0x01 {
        return Box::new(PacketZcReqCouple::from(buffer, packetver));
    }
    if buffer[0] == 0xe3 && buffer[1] == 0x01 {
        return Box::new(PacketCzJoinCouple::from(buffer, packetver));
    }
    if buffer[0] == 0xe4 && buffer[1] == 0x01 {
        return Box::new(PacketZcStartCouple::from(buffer, packetver));
    }
    if buffer[0] == 0xe5 && buffer[1] == 0x01 {
        return Box::new(PacketCzReqJoinCouple::from(buffer, packetver));
    }
    if buffer[0] == 0xe6 && buffer[1] == 0x01 {
        return Box::new(PacketZcCouplename::from(buffer, packetver));
    }
    if buffer[0] == 0xe7 && buffer[1] == 0x01 {
        return Box::new(PacketCzDoridori::from(buffer, packetver));
    }
    if buffer[0] == 0xe8 && buffer[1] == 0x01 {
        return Box::new(PacketCzMakeGroup2::from(buffer, packetver));
    }
    if buffer[0] == 0xe9 && buffer[1] == 0x01 {
        return Box::new(PacketZcAddMemberToGroup2::from(buffer, packetver));
    }
    if buffer[0] == 0xea && buffer[1] == 0x01 {
        return Box::new(PacketZcCongratulation::from(buffer, packetver));
    }
    if buffer[0] == 0xeb && buffer[1] == 0x01 {
        return Box::new(PacketZcNotifyPositionToGuildm::from(buffer, packetver));
    }
    if buffer[0] == 0xec && buffer[1] == 0x01 {
        return Box::new(PacketZcGuildMemberMapChange::from(buffer, packetver));
    }
    if buffer[0] == 0xed && buffer[1] == 0x01 {
        return Box::new(PacketCzChopokgi::from(buffer, packetver));
    }
    if buffer[0] == 0xee && buffer[1] == 0x01 {
        return Box::new(PacketZcNormalItemlist2::from(buffer, packetver));
    }
    if buffer[0] == 0xef && buffer[1] == 0x01 {
        return Box::new(PacketZcCartNormalItemlist2::from(buffer, packetver));
    }
    if buffer[0] == 0xf0 && buffer[1] == 0x01 {
        return Box::new(PacketZcStoreNormalItemlist2::from(buffer, packetver));
    }
    if buffer[0] == 0xf1 && buffer[1] == 0x01 {
        return Box::new(PacketAcNotifyError::from(buffer, packetver));
    }
    if buffer[0] == 0xf2 && buffer[1] == 0x01 {
        return Box::new(PacketZcUpdateCharstat2::from(buffer, packetver));
    }
    if buffer[0] == 0xf3 && buffer[1] == 0x01 {
        return Box::new(PacketZcNotifyEffect2::from(buffer, packetver));
    }
    if buffer[0] == 0xf4 && buffer[1] == 0x01 {
        return Box::new(PacketZcReqExchangeItem2::from(buffer, packetver));
    }
    if buffer[0] == 0xf5 && buffer[1] == 0x01 {
        return Box::new(PacketZcAckExchangeItem2::from(buffer, packetver));
    }
    if buffer[0] == 0xf6 && buffer[1] == 0x01 {
        return Box::new(PacketZcReqBaby::from(buffer, packetver));
    }
    if buffer[0] == 0xf7 && buffer[1] == 0x01 {
        return Box::new(PacketCzJoinBaby::from(buffer, packetver));
    }
    if buffer[0] == 0xf8 && buffer[1] == 0x01 {
        return Box::new(PacketZcStartBaby::from(buffer, packetver));
    }
    if buffer[0] == 0xf9 && buffer[1] == 0x01 {
        return Box::new(PacketCzReqJoinBaby::from(buffer, packetver));
    }
    if buffer[0] == 0xfa && buffer[1] == 0x01 {
        return Box::new(PacketCaLogin3::from(buffer, packetver));
    }
    if buffer[0] == 0xfb && buffer[1] == 0x01 {
        return Box::new(PacketChDeleteChar2::from(buffer, packetver));
    }
    if buffer[0] == 0xfc && buffer[1] == 0x01 {
        return Box::new(PacketZcRepairitemlist::from(buffer, packetver));
    }
    if buffer[0] == 0xfd && buffer[1] == 0x01 {
        return Box::new(PacketCzReqItemrepair::from(buffer, packetver));
    }
    if buffer[0] == 0xfe && buffer[1] == 0x01 {
        return Box::new(PacketZcAckItemrepair::from(buffer, packetver));
    }
    if buffer[0] == 0xff && buffer[1] == 0x01 {
        return Box::new(PacketZcHighjump::from(buffer, packetver));
    }
    if buffer[0] == 0x00 && buffer[1] == 0x02 {
        return Box::new(PacketCaConnectInfoChanged::from(buffer, packetver));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x02 {
        return Box::new(PacketZcFriendsList::from(buffer, packetver));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x02 {
        return Box::new(PacketCzAddFriends::from(buffer, packetver));
    }
    if buffer[0] == 0x03 && buffer[1] == 0x02 {
        return Box::new(PacketCzDeleteFriends::from(buffer, packetver));
    }
    if buffer[0] == 0x04 && buffer[1] == 0x02 {
        return Box::new(PacketCaExeHashcheck::from(buffer, packetver));
    }
    if buffer[0] == 0x05 && buffer[1] == 0x02 {
        return Box::new(PacketZcDivorce::from(buffer, packetver));
    }
    if buffer[0] == 0x06 && buffer[1] == 0x02 {
        return Box::new(PacketZcFriendsState::from(buffer, packetver));
    }
    if buffer[0] == 0x07 && buffer[1] == 0x02 {
        return Box::new(PacketZcReqAddFriends::from(buffer, packetver));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x02 {
        return Box::new(PacketCzAckReqAddFriends::from(buffer, packetver));
    }
    if buffer[0] == 0x09 && buffer[1] == 0x02 {
        return Box::new(PacketZcAddFriendsList::from(buffer, packetver));
    }
    if buffer[0] == 0x0a && buffer[1] == 0x02 {
        return Box::new(PacketZcDeleteFriends::from(buffer, packetver));
    }
    if buffer[0] == 0x0b && buffer[1] == 0x02 {
        return Box::new(PacketAcRefuseLoginR3::from(buffer, packetver));
    }
    if buffer[0] == 0x0c && buffer[1] == 0x02 {
        return Box::new(PacketCzExeHashcheck::from(buffer, packetver));
    }
    if buffer[0] == 0x0d && buffer[1] == 0x02 {
        return Box::new(PacketHcBlockCharacter::from(buffer, packetver));
    }
    if buffer[0] == 0x0e && buffer[1] == 0x02 {
        return Box::new(PacketZcStarskill::from(buffer, packetver));
    }
    if buffer[0] == 0x0f && buffer[1] == 0x02 {
        return Box::new(PacketCzReqPvppoint::from(buffer, packetver));
    }
    if buffer[0] == 0x10 && buffer[1] == 0x02 {
        return Box::new(PacketZcAckPvppoint::from(buffer, packetver));
    }
    if buffer[0] == 0x11 && buffer[1] == 0x02 {
        return Box::new(PacketZhMovePvpworld::from(buffer, packetver));
    }
    if buffer[0] == 0x12 && buffer[1] == 0x02 {
        return Box::new(PacketCzReqGiveMannerByname::from(buffer, packetver));
    }
    if buffer[0] == 0x13 && buffer[1] == 0x02 {
        return Box::new(PacketCzReqStatusGm::from(buffer, packetver));
    }
    if buffer[0] == 0x14 && buffer[1] == 0x02 {
        return Box::new(PacketZcAckStatusGm::from(buffer, packetver));
    }
    if buffer[0] == 0x15 && buffer[1] == 0x02 {
        return Box::new(PacketZcSkillmsg::from(buffer, packetver));
    }
    if buffer[0] == 0x16 && buffer[1] == 0x02 {
        return Box::new(PacketZcBabymsg::from(buffer, packetver));
    }
    if buffer[0] == 0x17 && buffer[1] == 0x02 {
        return Box::new(PacketCzBlacksmithRank::from(buffer, packetver));
    }
    if buffer[0] == 0x18 && buffer[1] == 0x02 {
        return Box::new(PacketCzAlchemistRank::from(buffer, packetver));
    }
    if buffer[0] == 0x19 && buffer[1] == 0x02 {
        return Box::new(PacketZcBlacksmithRank::from(buffer, packetver));
    }
    if buffer[0] == 0x1a && buffer[1] == 0x02 {
        return Box::new(PacketZcAlchemistRank::from(buffer, packetver));
    }
    if buffer[0] == 0x1b && buffer[1] == 0x02 {
        return Box::new(PacketZcBlacksmithPoint::from(buffer, packetver));
    }
    if buffer[0] == 0x1c && buffer[1] == 0x02 {
        return Box::new(PacketZcAlchemistPoint::from(buffer, packetver));
    }
    if buffer[0] == 0x1d && buffer[1] == 0x02 {
        return Box::new(PacketCzLesseffect::from(buffer, packetver));
    }
    if buffer[0] == 0x1e && buffer[1] == 0x02 {
        return Box::new(PacketZcLesseffect::from(buffer, packetver));
    }
    if buffer[0] == 0x1f && buffer[1] == 0x02 {
        return Box::new(PacketZcNotifyPkinfo::from(buffer, packetver));
    }
    if buffer[0] == 0x20 && buffer[1] == 0x02 {
        return Box::new(PacketZcNotifyCrazykiller::from(buffer, packetver));
    }
    if buffer[0] == 0x21 && buffer[1] == 0x02 {
        return Box::new(PacketZcNotifyWeaponitemlist::from(buffer, packetver));
    }
    if buffer[0] == 0x22 && buffer[1] == 0x02 {
        return Box::new(PacketCzReqWeaponrefine::from(buffer, packetver));
    }
    if buffer[0] == 0x23 && buffer[1] == 0x02 {
        return Box::new(PacketZcAckWeaponrefine::from(buffer, packetver));
    }
    if buffer[0] == 0x24 && buffer[1] == 0x02 {
        return Box::new(PacketZcTaekwonPoint::from(buffer, packetver));
    }
    if buffer[0] == 0x25 && buffer[1] == 0x02 {
        return Box::new(PacketCzTaekwonRank::from(buffer, packetver));
    }
    if buffer[0] == 0x26 && buffer[1] == 0x02 {
        return Box::new(PacketZcTaekwonRank::from(buffer, packetver));
    }
    if buffer[0] == 0x27 && buffer[1] == 0x02 {
        return Box::new(PacketZcGameGuard::from(buffer, packetver));
    }
    if buffer[0] == 0x28 && buffer[1] == 0x02 {
        return Box::new(PacketCzAckGameGuard::from(buffer, packetver));
    }
    if buffer[0] == 0x29 && buffer[1] == 0x02 {
        return Box::new(PacketZcStateChange3::from(buffer, packetver));
    }
    if buffer[0] == 0x2a && buffer[1] == 0x02 {
        return Box::new(PacketZcNotifyStandentry3::from(buffer, packetver));
    }
    if buffer[0] == 0x2b && buffer[1] == 0x02 {
        return Box::new(PacketZcNotifyNewentry3::from(buffer, packetver));
    }
    if buffer[0] == 0x2c && buffer[1] == 0x02 {
        return Box::new(PacketZcNotifyMoveentry3::from(buffer, packetver));
    }
    if buffer[0] == 0x2d && buffer[1] == 0x02 {
        return Box::new(PacketCzCommandMer::from(buffer, packetver));
    }
    if buffer[0] == 0x2e && buffer[1] == 0x02 {
        return Box::new(PacketZcPropertyHomun::from(buffer, packetver));
    }
    if buffer[0] == 0x30 && buffer[1] == 0x02 {
        return Box::new(PacketZcChangestateMer::from(buffer, packetver));
    }
    if buffer[0] == 0x31 && buffer[1] == 0x02 {
        return Box::new(PacketCzRenameMer::from(buffer, packetver));
    }
    if buffer[0] == 0x32 && buffer[1] == 0x02 {
        return Box::new(PacketCzRequestMovenpc::from(buffer, packetver));
    }
    if buffer[0] == 0x33 && buffer[1] == 0x02 {
        return Box::new(PacketCzRequestActnpc::from(buffer, packetver));
    }
    if buffer[0] == 0x34 && buffer[1] == 0x02 {
        return Box::new(PacketCzRequestMovetoowner::from(buffer, packetver));
    }
    if buffer[0] == 0x3a && buffer[1] == 0x02 {
        return Box::new(PacketZcReqStorePassword::from(buffer, packetver));
    }
    if buffer[0] == 0x3b && buffer[1] == 0x02 {
        return Box::new(PacketCzAckStorePassword::from(buffer, packetver));
    }
    if buffer[0] == 0x3c && buffer[1] == 0x02 {
        return Box::new(PacketZcResultStorePassword::from(buffer, packetver));
    }
    if buffer[0] == 0x3d && buffer[1] == 0x02 {
        return Box::new(PacketAcEventResult::from(buffer, packetver));
    }
    if buffer[0] == 0x3e && buffer[1] == 0x02 {
        return Box::new(PacketHcRequestCharacterPassword::from(buffer, packetver));
    }
    if buffer[0] == 0x3f && buffer[1] == 0x02 {
        return Box::new(PacketCzMailGetList::from(buffer, packetver));
    }
    if buffer[0] == 0x40 && buffer[1] == 0x02 {
        return Box::new(PacketZcMailReqGetList::from(buffer, packetver));
    }
    if buffer[0] == 0x41 && buffer[1] == 0x02 {
        return Box::new(PacketCzMailOpen::from(buffer, packetver));
    }
    if buffer[0] == 0x42 && buffer[1] == 0x02 {
        return Box::new(PacketZcMailReqOpen::from(buffer, packetver));
    }
    if buffer[0] == 0x43 && buffer[1] == 0x02 {
        return Box::new(PacketCzMailDelete::from(buffer, packetver));
    }
    if buffer[0] == 0x44 && buffer[1] == 0x02 {
        return Box::new(PacketCzMailGetItem::from(buffer, packetver));
    }
    if buffer[0] == 0x45 && buffer[1] == 0x02 {
        return Box::new(PacketZcMailReqGetItem::from(buffer, packetver));
    }
    if buffer[0] == 0x46 && buffer[1] == 0x02 {
        return Box::new(PacketCzMailResetItem::from(buffer, packetver));
    }
    if buffer[0] == 0x47 && buffer[1] == 0x02 {
        return Box::new(PacketCzMailAddItem::from(buffer, packetver));
    }
    if buffer[0] == 0x48 && buffer[1] == 0x02 {
        return Box::new(PacketCzMailSend::from(buffer, packetver));
    }
    if buffer[0] == 0x49 && buffer[1] == 0x02 {
        return Box::new(PacketZcMailReqSend::from(buffer, packetver));
    }
    if buffer[0] == 0x4a && buffer[1] == 0x02 {
        return Box::new(PacketZcMailReceive::from(buffer, packetver));
    }
    if buffer[0] == 0x4b && buffer[1] == 0x02 {
        return Box::new(PacketCzAuctionCreate::from(buffer, packetver));
    }
    if buffer[0] == 0x4c && buffer[1] == 0x02 {
        return Box::new(PacketCzAuctionAddItem::from(buffer, packetver));
    }
    if buffer[0] == 0x4d && buffer[1] == 0x02 {
        return Box::new(PacketCzAuctionAdd::from(buffer, packetver));
    }
    if buffer[0] == 0x4e && buffer[1] == 0x02 {
        return Box::new(PacketCzAuctionAddCancel::from(buffer, packetver));
    }
    if buffer[0] == 0x4f && buffer[1] == 0x02 {
        return Box::new(PacketCzAuctionBuy::from(buffer, packetver));
    }
    if buffer[0] == 0x50 && buffer[1] == 0x02 {
        return Box::new(PacketZcAuctionResult::from(buffer, packetver));
    }
    if buffer[0] == 0x51 && buffer[1] == 0x02 {
        return Box::new(PacketCzAuctionItemSearch::from(buffer, packetver));
    }
    if buffer[0] == 0x52 && buffer[1] == 0x02 {
        return Box::new(PacketZcAuctionItemReqSearch::from(buffer, packetver));
    }
    if buffer[0] == 0x53 && buffer[1] == 0x02 {
        return Box::new(PacketZcStarplace::from(buffer, packetver));
    }
    if buffer[0] == 0x54 && buffer[1] == 0x02 {
        return Box::new(PacketCzAgreeStarplace::from(buffer, packetver));
    }
    if buffer[0] == 0x55 && buffer[1] == 0x02 {
        return Box::new(PacketZcAckMailAddItem::from(buffer, packetver));
    }
    if buffer[0] == 0x56 && buffer[1] == 0x02 {
        return Box::new(PacketZcAckAuctionAddItem::from(buffer, packetver));
    }
    if buffer[0] == 0x57 && buffer[1] == 0x02 {
        return Box::new(PacketZcAckMailDelete::from(buffer, packetver));
    }
    if buffer[0] == 0x58 && buffer[1] == 0x02 {
        return Box::new(PacketCaReqGameGuardCheck::from(buffer, packetver));
    }
    if buffer[0] == 0x59 && buffer[1] == 0x02 {
        return Box::new(PacketAcAckGameGuard::from(buffer, packetver));
    }
    if buffer[0] == 0x5a && buffer[1] == 0x02 {
        return Box::new(PacketZcMakingitemList::from(buffer, packetver));
    }
    if buffer[0] == 0x5b && buffer[1] == 0x02 {
        return Box::new(PacketCzReqMakingitem::from(buffer, packetver));
    }
    if buffer[0] == 0x5c && buffer[1] == 0x02 {
        return Box::new(PacketCzAuctionReqMyInfo::from(buffer, packetver));
    }
    if buffer[0] == 0x5d && buffer[1] == 0x02 {
        return Box::new(PacketCzAuctionReqMySellStop::from(buffer, packetver));
    }
    if buffer[0] == 0x5e && buffer[1] == 0x02 {
        return Box::new(PacketZcAuctionAckMySellStop::from(buffer, packetver));
    }
    if buffer[0] == 0x5f && buffer[1] == 0x02 {
        return Box::new(PacketZcAuctionWindows::from(buffer, packetver));
    }
    if buffer[0] == 0x60 && buffer[1] == 0x02 {
        return Box::new(PacketZcMailWindows::from(buffer, packetver));
    }
    if buffer[0] == 0x61 && buffer[1] == 0x02 {
        return Box::new(PacketAcReqLoginOldekey::from(buffer, packetver));
    }
    if buffer[0] == 0x62 && buffer[1] == 0x02 {
        return Box::new(PacketAcReqLoginNewekey::from(buffer, packetver));
    }
    if buffer[0] == 0x63 && buffer[1] == 0x02 {
        return Box::new(PacketAcReqLoginCardpass::from(buffer, packetver));
    }
    if buffer[0] == 0x64 && buffer[1] == 0x02 {
        return Box::new(PacketCaAckLoginOldekey::from(buffer, packetver));
    }
    if buffer[0] == 0x65 && buffer[1] == 0x02 {
        return Box::new(PacketCaAckLoginNewekey::from(buffer, packetver));
    }
    if buffer[0] == 0x66 && buffer[1] == 0x02 {
        return Box::new(PacketCaAckLoginCardpass::from(buffer, packetver));
    }
    if buffer[0] == 0x67 && buffer[1] == 0x02 {
        return Box::new(PacketAcAckEkeyFailNotexist::from(buffer, packetver));
    }
    if buffer[0] == 0x68 && buffer[1] == 0x02 {
        return Box::new(PacketAcAckEkeyFailNotusesekey::from(buffer, packetver));
    }
    if buffer[0] == 0x69 && buffer[1] == 0x02 {
        return Box::new(PacketAcAckEkeyFailNotusedekey::from(buffer, packetver));
    }
    if buffer[0] == 0x6a && buffer[1] == 0x02 {
        return Box::new(PacketAcAckEkeyFailAuthrefuse::from(buffer, packetver));
    }
    if buffer[0] == 0x6b && buffer[1] == 0x02 {
        return Box::new(PacketAcAckEkeyFailInputekey::from(buffer, packetver));
    }
    if buffer[0] == 0x6c && buffer[1] == 0x02 {
        return Box::new(PacketAcAckEkeyFailNotice::from(buffer, packetver));
    }
    if buffer[0] == 0x6d && buffer[1] == 0x02 {
        return Box::new(PacketAcAckEkeyFailNeedcardpass::from(buffer, packetver));
    }
    if buffer[0] == 0x6e && buffer[1] == 0x02 {
        return Box::new(PacketAcAckAuthekeyFailNotmatchcardpass::from(buffer, packetver));
    }
    if buffer[0] == 0x6f && buffer[1] == 0x02 {
        return Box::new(PacketAcAckFirstLogin::from(buffer, packetver));
    }
    if buffer[0] == 0x70 && buffer[1] == 0x02 {
        return Box::new(PacketAcReqLoginAccountInfo::from(buffer, packetver));
    }
    if buffer[0] == 0x71 && buffer[1] == 0x02 {
        return Box::new(PacketCaAckLoginAccountInfo::from(buffer, packetver));
    }
    if buffer[0] == 0x72 && buffer[1] == 0x02 {
        return Box::new(PacketAcAckPtIdInfo::from(buffer, packetver));
    }
    if buffer[0] == 0x73 && buffer[1] == 0x02 {
        return Box::new(PacketCzReqMailReturn::from(buffer, packetver));
    }
    if buffer[0] == 0x74 && buffer[1] == 0x02 {
        return Box::new(PacketZcAckMailReturn::from(buffer, packetver));
    }
    if buffer[0] == 0x75 && buffer[1] == 0x02 {
        return Box::new(PacketChEnter2::from(buffer, packetver));
    }
    if buffer[0] == 0x76 && buffer[1] == 0x02 {
        return Box::new(PacketCaAcceptLogin2::from(buffer, packetver));
    }
    if buffer[0] == 0x77 && buffer[1] == 0x02 {
        return Box::new(PacketCaLoginPcbang::from(buffer, packetver));
    }
    if buffer[0] == 0x78 && buffer[1] == 0x02 {
        return Box::new(PacketZcNotifyPcbang::from(buffer, packetver));
    }
    if buffer[0] == 0x79 && buffer[1] == 0x02 {
        return Box::new(PacketCzHuntinglist::from(buffer, packetver));
    }
    if buffer[0] == 0x7a && buffer[1] == 0x02 {
        return Box::new(PacketZcHuntinglist::from(buffer, packetver));
    }
    if buffer[0] == 0x7b && buffer[1] == 0x02 {
        return Box::new(PacketZcPcbangEffect::from(buffer, packetver));
    }
    if buffer[0] == 0x7c && buffer[1] == 0x02 {
        return Box::new(PacketCaLogin4::from(buffer, packetver));
    }
    if buffer[0] == 0x7d && buffer[1] == 0x02 {
        return Box::new(PacketZcPropertyMerce::from(buffer, packetver));
    }
    if buffer[0] == 0x7e && buffer[1] == 0x02 {
        return Box::new(PacketZcShandaProtect::from(buffer, packetver));
    }
    if buffer[0] == 0x7f && buffer[1] == 0x02 {
        return Box::new(PacketCaClientType::from(buffer, packetver));
    }
    if buffer[0] == 0x80 && buffer[1] == 0x02 {
        return Box::new(PacketZcGangsiPoint::from(buffer, packetver));
    }
    if buffer[0] == 0x81 && buffer[1] == 0x02 {
        return Box::new(PacketCzGangsiRank::from(buffer, packetver));
    }
    if buffer[0] == 0x82 && buffer[1] == 0x02 {
        return Box::new(PacketZcGangsiRank::from(buffer, packetver));
    }
    if buffer[0] == 0x83 && buffer[1] == 0x02 {
        return Box::new(PacketZcAid::from(buffer, packetver));
    }
    if buffer[0] == 0x84 && buffer[1] == 0x02 {
        return Box::new(PacketZcNotifyEffect3::from(buffer, packetver));
    }
    if buffer[0] == 0x85 && buffer[1] == 0x02 {
        return Box::new(PacketZcDeathQuestion::from(buffer, packetver));
    }
    if buffer[0] == 0x86 && buffer[1] == 0x02 {
        return Box::new(PacketCzDeathQuestion::from(buffer, packetver));
    }
    if buffer[0] == 0x87 && buffer[1] == 0x02 {
        return Box::new(PacketZcPcCashPointItemlist::from(buffer, packetver));
    }
    if buffer[0] == 0x88 && buffer[1] == 0x02 {
        return Box::new(PacketCzPcBuyCashPointItem::from(buffer, packetver));
    }
    if buffer[0] == 0x89 && buffer[1] == 0x02 {
        return Box::new(PacketZcPcCashPointUpdate::from(buffer, packetver));
    }
    if buffer[0] == 0x8a && buffer[1] == 0x02 {
        return Box::new(PacketZcNpcShowefstUpdate::from(buffer, packetver));
    }
    if buffer[0] == 0x8c && buffer[1] == 0x02 {
        return Box::new(PacketChSelectCharGoingtobeused::from(buffer, packetver));
    }
    if buffer[0] == 0x8d && buffer[1] == 0x02 {
        return Box::new(PacketChReqIsValidCharname::from(buffer, packetver));
    }
    if buffer[0] == 0x8e && buffer[1] == 0x02 {
        return Box::new(PacketHcAckIsValidCharname::from(buffer, packetver));
    }
    if buffer[0] == 0x8f && buffer[1] == 0x02 {
        return Box::new(PacketChReqChangeCharname::from(buffer, packetver));
    }
    if buffer[0] == 0x90 && buffer[1] == 0x02 {
        return Box::new(PacketHcAckChangeCharname::from(buffer, packetver));
    }
    if buffer[0] == 0x91 && buffer[1] == 0x02 {
        return Box::new(PacketZcMsg::from(buffer, packetver));
    }
    if buffer[0] == 0x92 && buffer[1] == 0x02 {
        return Box::new(PacketCzStandingResurrection::from(buffer, packetver));
    }
    if buffer[0] == 0x93 && buffer[1] == 0x02 {
        return Box::new(PacketZcBossInfo::from(buffer, packetver));
    }
    if buffer[0] == 0x94 && buffer[1] == 0x02 {
        return Box::new(PacketZcReadBook::from(buffer, packetver));
    }
    if buffer[0] == 0x95 && buffer[1] == 0x02 {
        return Box::new(PacketZcEquipmentItemlist2::from(buffer, packetver));
    }
    if buffer[0] == 0x96 && buffer[1] == 0x02 {
        return Box::new(PacketZcStoreEquipmentItemlist2::from(buffer, packetver));
    }
    if buffer[0] == 0x97 && buffer[1] == 0x02 {
        return Box::new(PacketZcCartEquipmentItemlist2::from(buffer, packetver));
    }
    if buffer[0] == 0x98 && buffer[1] == 0x02 {
        return Box::new(PacketZcCashTimeCounter::from(buffer, packetver));
    }
    if buffer[0] == 0x99 && buffer[1] == 0x02 {
        return Box::new(PacketZcCashItemDelete::from(buffer, packetver));
    }
    if buffer[0] == 0x9a && buffer[1] == 0x02 {
        return Box::new(PacketZcItemPickupAck2::from(buffer, packetver));
    }
    if buffer[0] == 0x9b && buffer[1] == 0x02 {
        return Box::new(PacketZcMerInit::from(buffer, packetver));
    }
    if buffer[0] == 0x9c && buffer[1] == 0x02 {
        return Box::new(PacketZcMerProperty::from(buffer, packetver));
    }
    if buffer[0] == 0x9d && buffer[1] == 0x02 {
        return Box::new(PacketZcMerSkillinfoList::from(buffer, packetver));
    }
    if buffer[0] == 0x9e && buffer[1] == 0x02 {
        return Box::new(PacketZcMerSkillinfoUpdate::from(buffer, packetver));
    }
    if buffer[0] == 0x9f && buffer[1] == 0x02 {
        return Box::new(PacketCzMerCommand::from(buffer, packetver));
    }
    if buffer[0] == 0xa0 && buffer[1] == 0x02 {
        return Box::new(UnusedPacketCzMerUseSkill::from(buffer, packetver));
    }
    if buffer[0] == 0xa1 && buffer[1] == 0x02 {
        return Box::new(UnusedPacketCzMerUpgradeSkilllevel::from(buffer, packetver));
    }
    if buffer[0] == 0xa2 && buffer[1] == 0x02 {
        return Box::new(PacketZcMerParChange::from(buffer, packetver));
    }
    if buffer[0] == 0xa3 && buffer[1] == 0x02 {
        return Box::new(PacketZcGameguardLingoKey::from(buffer, packetver));
    }
    if buffer[0] == 0xa5 && buffer[1] == 0x02 {
        return Box::new(PacketCzKsyEvent::from(buffer, packetver));
    }
    if buffer[0] == 0xaa && buffer[1] == 0x02 {
        return Box::new(PacketZcReqCashPassword::from(buffer, packetver));
    }
    if buffer[0] == 0xab && buffer[1] == 0x02 {
        return Box::new(PacketCzAckCashPassword::from(buffer, packetver));
    }
    if buffer[0] == 0xac && buffer[1] == 0x02 {
        return Box::new(PacketZcResultCashPassword::from(buffer, packetver));
    }
    if buffer[0] == 0xad && buffer[1] == 0x02 {
        return Box::new(PacketAcRequestSecondPassword::from(buffer, packetver));
    }
    if buffer[0] == 0xb0 && buffer[1] == 0x02 {
        return Box::new(PacketCaLoginHan::from(buffer, packetver));
    }
    if buffer[0] == 0xb1 && buffer[1] == 0x02 {
        return Box::new(PacketZcAllQuestList::from(buffer, packetver));
    }
    if buffer[0] == 0xb2 && buffer[1] == 0x02 {
        return Box::new(PacketZcAllQuestMission::from(buffer, packetver));
    }
    if buffer[0] == 0xb3 && buffer[1] == 0x02 {
        return Box::new(PacketZcAddQuest::from(buffer, packetver));
    }
    if buffer[0] == 0xb4 && buffer[1] == 0x02 {
        return Box::new(PacketZcDelQuest::from(buffer, packetver));
    }
    if buffer[0] == 0xb5 && buffer[1] == 0x02 {
        return Box::new(PacketZcUpdateMissionHunt::from(buffer, packetver));
    }
    if buffer[0] == 0xb6 && buffer[1] == 0x02 {
        return Box::new(PacketCzActiveQuest::from(buffer, packetver));
    }
    if buffer[0] == 0xb7 && buffer[1] == 0x02 {
        return Box::new(PacketZcActiveQuest::from(buffer, packetver));
    }
    if buffer[0] == 0xb8 && buffer[1] == 0x02 {
        return Box::new(PacketZcItemPickupParty::from(buffer, packetver));
    }
    if buffer[0] == 0xb9 && buffer[1] == 0x02 {
        return Box::new(PacketZcShortcutKeyList::from(buffer, packetver));
    }
    if buffer[0] == 0xba && buffer[1] == 0x02 {
        return Box::new(PacketCzShortcutKeyChange::from(buffer, packetver));
    }
    if buffer[0] == 0xbb && buffer[1] == 0x02 {
        return Box::new(PacketZcEquipitemDamaged::from(buffer, packetver));
    }
    if buffer[0] == 0xbc && buffer[1] == 0x02 {
        return Box::new(PacketZcNotifyPcbangPlayingTime::from(buffer, packetver));
    }
    if buffer[0] == 0xbf && buffer[1] == 0x02 {
        return Box::new(PacketZcSrpacketr2Init::from(buffer, packetver));
    }
    if buffer[0] == 0xc0 && buffer[1] == 0x02 {
        return Box::new(PacketCzSrpacketr2Start::from(buffer, packetver));
    }
    if buffer[0] == 0xc1 && buffer[1] == 0x02 {
        return Box::new(PacketZcNpcChat::from(buffer, packetver));
    }
    if buffer[0] == 0xc2 && buffer[1] == 0x02 {
        return Box::new(PacketZcFormatstringMsg::from(buffer, packetver));
    }
    if buffer[0] == 0xc5 && buffer[1] == 0x02 {
        return Box::new(PacketZcPartyJoinReqAck::from(buffer, packetver));
    }
    if buffer[0] == 0xc6 && buffer[1] == 0x02 {
        return Box::new(PacketZcPartyJoinReq::from(buffer, packetver));
    }
    if buffer[0] == 0xc7 && buffer[1] == 0x02 {
        return Box::new(PacketCzPartyJoinReqAck::from(buffer, packetver));
    }
    if buffer[0] == 0xc8 && buffer[1] == 0x02 {
        return Box::new(PacketCzPartyConfig::from(buffer, packetver));
    }
    if buffer[0] == 0xc9 && buffer[1] == 0x02 {
        return Box::new(PacketZcPartyConfig::from(buffer, packetver));
    }
    if buffer[0] == 0xca && buffer[1] == 0x02 {
        return Box::new(PacketHcRefuseSelectchar::from(buffer, packetver));
    }
    if buffer[0] == 0xcb && buffer[1] == 0x02 {
        return Box::new(PacketZcMemorialdungeonSubscriptionInfo::from(buffer, packetver));
    }
    if buffer[0] == 0xcc && buffer[1] == 0x02 {
        return Box::new(PacketZcMemorialdungeonSubscriptionNotify::from(buffer, packetver));
    }
    if buffer[0] == 0xcd && buffer[1] == 0x02 {
        return Box::new(PacketZcMemorialdungeonInfo::from(buffer, packetver));
    }
    if buffer[0] == 0xce && buffer[1] == 0x02 {
        return Box::new(PacketZcMemorialdungeonNotify::from(buffer, packetver));
    }
    if buffer[0] == 0xcf && buffer[1] == 0x02 {
        return Box::new(PacketCzMemorialdungeonCommand::from(buffer, packetver));
    }
    if buffer[0] == 0xd0 && buffer[1] == 0x02 {
        return Box::new(PacketZcEquipmentItemlist3::from(buffer, packetver));
    }
    if buffer[0] == 0xd1 && buffer[1] == 0x02 {
        return Box::new(PacketZcStoreEquipmentItemlist3::from(buffer, packetver));
    }
    if buffer[0] == 0xd2 && buffer[1] == 0x02 {
        return Box::new(PacketZcCartEquipmentItemlist3::from(buffer, packetver));
    }
    if buffer[0] == 0xd3 && buffer[1] == 0x02 {
        return Box::new(PacketZcNotifyBindOnEquip::from(buffer, packetver));
    }
    if buffer[0] == 0xd4 && buffer[1] == 0x02 {
        return Box::new(PacketZcItemPickupAck3::from(buffer, packetver));
    }
    if buffer[0] == 0xd5 && buffer[1] == 0x02 {
        return Box::new(PacketZcIsvrDisconnect::from(buffer, packetver));
    }
    if buffer[0] == 0xd6 && buffer[1] == 0x02 {
        return Box::new(PacketCzEquipwinMicroscope::from(buffer, packetver));
    }
    if buffer[0] == 0xd7 && buffer[1] == 0x02 {
        return Box::new(PacketZcEquipwinMicroscope::from(buffer, packetver));
    }
    if buffer[0] == 0xd8 && buffer[1] == 0x02 {
        return Box::new(PacketCzConfig::from(buffer, packetver));
    }
    if buffer[0] == 0xd9 && buffer[1] == 0x02 {
        return Box::new(PacketZcConfig::from(buffer, packetver));
    }
    if buffer[0] == 0xda && buffer[1] == 0x02 {
        return Box::new(PacketZcConfigNotify::from(buffer, packetver));
    }
    if buffer[0] == 0xdb && buffer[1] == 0x02 {
        return Box::new(PacketCzBattlefieldChat::from(buffer, packetver));
    }
    if buffer[0] == 0xdc && buffer[1] == 0x02 {
        return Box::new(PacketZcBattlefieldChat::from(buffer, packetver));
    }
    if buffer[0] == 0xdd && buffer[1] == 0x02 {
        return Box::new(PacketZcBattlefieldNotifyCampinfo::from(buffer, packetver));
    }
    if buffer[0] == 0xde && buffer[1] == 0x02 {
        return Box::new(PacketZcBattlefieldNotifyPoint::from(buffer, packetver));
    }
    if buffer[0] == 0xdf && buffer[1] == 0x02 {
        return Box::new(PacketZcBattlefieldNotifyPosition::from(buffer, packetver));
    }
    if buffer[0] == 0xe0 && buffer[1] == 0x02 {
        return Box::new(PacketZcBattlefieldNotifyHp::from(buffer, packetver));
    }
    if buffer[0] == 0xe1 && buffer[1] == 0x02 {
        return Box::new(PacketZcNotifyAct2::from(buffer, packetver));
    }
    if buffer[0] == 0xe6 && buffer[1] == 0x02 {
        return Box::new(PacketCzBotCheck::from(buffer, packetver));
    }
    if buffer[0] == 0xe7 && buffer[1] == 0x02 {
        return Box::new(PacketZcMapproperty::from(buffer, packetver));
    }
    if buffer[0] == 0xe8 && buffer[1] == 0x02 {
        return Box::new(PacketZcNormalItemlist3::from(buffer, packetver));
    }
    if buffer[0] == 0xe9 && buffer[1] == 0x02 {
        return Box::new(PacketZcCartNormalItemlist3::from(buffer, packetver));
    }
    if buffer[0] == 0xea && buffer[1] == 0x02 {
        return Box::new(PacketZcStoreNormalItemlist3::from(buffer, packetver));
    }
    if buffer[0] == 0xeb && buffer[1] == 0x02 {
        return Box::new(PacketZcAcceptEnter2::from(buffer, packetver));
    }
    if buffer[0] == 0xec && buffer[1] == 0x02 {
        return Box::new(PacketZcNotifyMoveentry4::from(buffer, packetver));
    }
    if buffer[0] == 0xed && buffer[1] == 0x02 {
        return Box::new(PacketZcNotifyNewentry4::from(buffer, packetver));
    }
    if buffer[0] == 0xee && buffer[1] == 0x02 {
        return Box::new(PacketZcNotifyStandentry4::from(buffer, packetver));
    }
    if buffer[0] == 0xef && buffer[1] == 0x02 {
        return Box::new(PacketZcNotifyFont::from(buffer, packetver));
    }
    if buffer[0] == 0xf0 && buffer[1] == 0x02 {
        return Box::new(PacketZcProgress::from(buffer, packetver));
    }
    if buffer[0] == 0xf1 && buffer[1] == 0x02 {
        return Box::new(PacketCzProgress::from(buffer, packetver));
    }
    if buffer[0] == 0xf2 && buffer[1] == 0x02 {
        return Box::new(PacketZcProgressCancel::from(buffer, packetver));
    }
    if buffer[0] == 0x5c && buffer[1] == 0x03 {
        return Box::new(PacketCzOpenSimpleCashshopItemlist::from(buffer, packetver));
    }
    if buffer[0] == 0x5d && buffer[1] == 0x03 {
        return Box::new(PacketZcSimpleCashshopPointItemlist::from(buffer, packetver));
    }
    if buffer[0] == 0x5e && buffer[1] == 0x03 {
        return Box::new(PacketCzCloseWindow::from(buffer, packetver));
    }
    if buffer[0] == 0xdd && buffer[1] == 0x03 {
        return Box::new(PacketAhcGameGuard::from(buffer, packetver));
    }
    if buffer[0] == 0xde && buffer[1] == 0x03 {
        return Box::new(PacketCahAckGameGuard::from(buffer, packetver));
    }
    if buffer[0] == 0x36 && buffer[1] == 0x04 {
        return Box::new(PacketCzEnter2::from(buffer, packetver));
    }
    if buffer[0] == 0x38 && buffer[1] == 0x04 {
        return Box::new(PacketCzUseSkill2::from(buffer, packetver));
    }
    if buffer[0] == 0x39 && buffer[1] == 0x04 {
        return Box::new(PacketCzUseItem2::from(buffer, packetver));
    }
    if buffer[0] == 0x3d && buffer[1] == 0x04 {
        return Box::new(PacketZcSkillPostdelay::from(buffer, packetver));
    }
    if buffer[0] == 0x3e && buffer[1] == 0x04 {
        return Box::new(PacketZcSkillPostdelayList::from(buffer, packetver));
    }
    if buffer[0] == 0x3f && buffer[1] == 0x04 {
        return Box::new(PacketZcMsgStateChange2::from(buffer, packetver));
    }
    if buffer[0] == 0x40 && buffer[1] == 0x04 {
        return Box::new(PacketZcMillenniumshield::from(buffer, packetver));
    }
    if buffer[0] == 0x41 && buffer[1] == 0x04 {
        return Box::new(PacketZcSkillinfoDelete::from(buffer, packetver));
    }
    if buffer[0] == 0x42 && buffer[1] == 0x04 {
        return Box::new(PacketZcSkillSelectRequest::from(buffer, packetver));
    }
    if buffer[0] == 0x43 && buffer[1] == 0x04 {
        return Box::new(PacketCzSkillSelectResponse::from(buffer, packetver));
    }
    if buffer[0] == 0x44 && buffer[1] == 0x04 {
        return Box::new(PacketZcSimpleCashPointItemlist::from(buffer, packetver));
    }
    if buffer[0] == 0x45 && buffer[1] == 0x04 {
        return Box::new(PacketCzSimpleBuyCashPointItem::from(buffer, packetver));
    }
    if buffer[0] == 0x46 && buffer[1] == 0x04 {
        return Box::new(PacketZcQuestNotifyEffect::from(buffer, packetver));
    }
    if buffer[0] == 0x48 && buffer[1] == 0x04 {
        return Box::new(PacketHcCharacterList::from(buffer, packetver));
    }
    if buffer[0] == 0x49 && buffer[1] == 0x04 {
        return Box::new(PacketZcHackshErrorMsg::from(buffer, packetver));
    }
    if buffer[0] == 0x4a && buffer[1] == 0x04 {
        return Box::new(PacketCzClientVersion::from(buffer, packetver));
    }
    if buffer[0] == 0x4b && buffer[1] == 0x04 {
        return Box::new(PacketCzCloseSimplecashShop::from(buffer, packetver));
    }
    if buffer[0] == 0xd0 && buffer[1] == 0x07 {
        return Box::new(PacketZcEsResult::from(buffer, packetver));
    }
    if buffer[0] == 0xd1 && buffer[1] == 0x07 {
        return Box::new(PacketCzEsGetList::from(buffer, packetver));
    }
    if buffer[0] == 0xd2 && buffer[1] == 0x07 {
        return Box::new(PacketZcEsList::from(buffer, packetver));
    }
    if buffer[0] == 0xd3 && buffer[1] == 0x07 {
        return Box::new(PacketCzEsChoose::from(buffer, packetver));
    }
    if buffer[0] == 0xd4 && buffer[1] == 0x07 {
        return Box::new(PacketCzEsCancel::from(buffer, packetver));
    }
    if buffer[0] == 0xd5 && buffer[1] == 0x07 {
        return Box::new(PacketZcEsReady::from(buffer, packetver));
    }
    if buffer[0] == 0xd6 && buffer[1] == 0x07 {
        return Box::new(PacketZcEsGoto::from(buffer, packetver));
    }
    if buffer[0] == 0xd7 && buffer[1] == 0x07 {
        return Box::new(PacketCzGroupinfoChangeV2::from(buffer, packetver));
    }
    if buffer[0] == 0xd8 && buffer[1] == 0x07 {
        return Box::new(PacketZcReqGroupinfoChangeV2::from(buffer, packetver));
    }
    if buffer[0] == 0xd9 && buffer[1] == 0x07 {
        return Box::new(PacketZcShortcutKeyListV2::from(buffer, packetver));
    }
    if buffer[0] == 0xda && buffer[1] == 0x07 {
        return Box::new(PacketCzChangeGroupMaster::from(buffer, packetver));
    }
    if buffer[0] == 0xdb && buffer[1] == 0x07 {
        return Box::new(PacketZcHoParChange::from(buffer, packetver));
    }
    if buffer[0] == 0xdc && buffer[1] == 0x07 {
        return Box::new(PacketCzSeekParty::from(buffer, packetver));
    }
    if buffer[0] == 0xdd && buffer[1] == 0x07 {
        return Box::new(PacketZcSeekParty::from(buffer, packetver));
    }
    if buffer[0] == 0xde && buffer[1] == 0x07 {
        return Box::new(PacketCzSeekPartyMember::from(buffer, packetver));
    }
    if buffer[0] == 0xdf && buffer[1] == 0x07 {
        return Box::new(PacketZcSeekPartyMember::from(buffer, packetver));
    }
    if buffer[0] == 0xe0 && buffer[1] == 0x07 {
        return Box::new(PacketZcEsNotiMyinfo::from(buffer, packetver));
    }
    if buffer[0] == 0xe1 && buffer[1] == 0x07 {
        return Box::new(PacketZcSkillinfoUpdate2::from(buffer, packetver));
    }
    if buffer[0] == 0xe2 && buffer[1] == 0x07 {
        return Box::new(PacketZcMsgValue::from(buffer, packetver));
    }
    if buffer[0] == 0xe3 && buffer[1] == 0x07 {
        return Box::new(PacketZcItemlistwinOpen::from(buffer, packetver));
    }
    if buffer[0] == 0xe4 && buffer[1] == 0x07 {
        return Box::new(PacketCzItemlistwinRes::from(buffer, packetver));
    }
    if buffer[0] == 0xe5 && buffer[1] == 0x07 {
        return Box::new(PacketChEnterCheckbot::from(buffer, packetver));
    }
    if buffer[0] == 0xe6 && buffer[1] == 0x07 {
        return Box::new(PacketZcMsgSkill::from(buffer, packetver));
    }
    if buffer[0] == 0xe7 && buffer[1] == 0x07 {
        return Box::new(PacketChCheckbot::from(buffer, packetver));
    }
    if buffer[0] == 0xe8 && buffer[1] == 0x07 {
        return Box::new(PacketHcCheckbot::from(buffer, packetver));
    }
    if buffer[0] == 0xe9 && buffer[1] == 0x07 {
        return Box::new(PacketHcCheckbotResult::from(buffer, packetver));
    }
    if buffer[0] == 0xea && buffer[1] == 0x07 {
        return Box::new(PacketCzBattleFieldList::from(buffer, packetver));
    }
    if buffer[0] == 0xeb && buffer[1] == 0x07 {
        return Box::new(PacketZcBattleFieldList::from(buffer, packetver));
    }
    if buffer[0] == 0xec && buffer[1] == 0x07 {
        return Box::new(PacketCzJoinBattleField::from(buffer, packetver));
    }
    if buffer[0] == 0xed && buffer[1] == 0x07 {
        return Box::new(PacketZcJoinBattleField::from(buffer, packetver));
    }
    if buffer[0] == 0xee && buffer[1] == 0x07 {
        return Box::new(PacketCzCancelBattleField::from(buffer, packetver));
    }
    if buffer[0] == 0xef && buffer[1] == 0x07 {
        return Box::new(PacketZcCancelBattleField::from(buffer, packetver));
    }
    if buffer[0] == 0xf0 && buffer[1] == 0x07 {
        return Box::new(PacketCzReqBattleStateMonitor::from(buffer, packetver));
    }
    if buffer[0] == 0xf1 && buffer[1] == 0x07 {
        return Box::new(PacketZcAckBattleStateMonitor::from(buffer, packetver));
    }
    if buffer[0] == 0xf2 && buffer[1] == 0x07 {
        return Box::new(PacketZcBattleNotiStartStep::from(buffer, packetver));
    }
    if buffer[0] == 0xf3 && buffer[1] == 0x07 {
        return Box::new(PacketZcBattleJoinNotiDefer::from(buffer, packetver));
    }
    if buffer[0] == 0xf4 && buffer[1] == 0x07 {
        return Box::new(PacketZcBattleJoinDisableState::from(buffer, packetver));
    }
    if buffer[0] == 0xf5 && buffer[1] == 0x07 {
        return Box::new(PacketCzGmFullstrip::from(buffer, packetver));
    }
    if buffer[0] == 0xf6 && buffer[1] == 0x07 {
        return Box::new(PacketZcNotifyExp::from(buffer, packetver));
    }
    if buffer[0] == 0xf7 && buffer[1] == 0x07 {
        return Box::new(PacketZcNotifyMoveentry7::from(buffer, packetver));
    }
    if buffer[0] == 0xf8 && buffer[1] == 0x07 {
        return Box::new(PacketZcNotifyNewentry5::from(buffer, packetver));
    }
    if buffer[0] == 0xf9 && buffer[1] == 0x07 {
        return Box::new(PacketZcNotifyStandentry5::from(buffer, packetver));
    }
    if buffer[0] == 0xfa && buffer[1] == 0x07 {
        return Box::new(PacketZcDeleteItemFromBody::from(buffer, packetver));
    }
    if buffer[0] == 0xfb && buffer[1] == 0x07 {
        return Box::new(PacketZcUseskillAck2::from(buffer, packetver));
    }
    if buffer[0] == 0xfc && buffer[1] == 0x07 {
        return Box::new(PacketZcChangeGroupMaster::from(buffer, packetver));
    }
    if buffer[0] == 0xfe && buffer[1] == 0x07 {
        return Box::new(PacketZcPlayNpcBgm::from(buffer, packetver));
    }
    if buffer[0] == 0xff && buffer[1] == 0x07 {
        return Box::new(PacketZcDefineCheck::from(buffer, packetver));
    }
    if buffer[0] == 0x00 && buffer[1] == 0x08 {
        return Box::new(PacketZcPcPurchaseItemlistFrommc2::from(buffer, packetver));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x08 {
        return Box::new(PacketCzPcPurchaseItemlistFrommc2::from(buffer, packetver));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x08 {
        return Box::new(PacketCzPartyBookingReqRegister::from(buffer, packetver));
    }
    if buffer[0] == 0x03 && buffer[1] == 0x08 {
        return Box::new(PacketZcPartyBookingAckRegister::from(buffer, packetver));
    }
    if buffer[0] == 0x04 && buffer[1] == 0x08 {
        return Box::new(PacketCzPartyBookingReqSearch::from(buffer, packetver));
    }
    if buffer[0] == 0x05 && buffer[1] == 0x08 {
        return Box::new(PacketZcPartyBookingAckSearch::from(buffer, packetver));
    }
    if buffer[0] == 0x06 && buffer[1] == 0x08 {
        return Box::new(PacketCzPartyBookingReqDelete::from(buffer, packetver));
    }
    if buffer[0] == 0x07 && buffer[1] == 0x08 {
        return Box::new(PacketZcPartyBookingAckDelete::from(buffer, packetver));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x08 {
        return Box::new(PacketCzPartyBookingReqUpdate::from(buffer, packetver));
    }
    if buffer[0] == 0x09 && buffer[1] == 0x08 {
        return Box::new(PacketZcPartyBookingNotifyInsert::from(buffer, packetver));
    }
    if buffer[0] == 0x0a && buffer[1] == 0x08 {
        return Box::new(PacketZcPartyBookingNotifyUpdate::from(buffer, packetver));
    }
    if buffer[0] == 0x0b && buffer[1] == 0x08 {
        return Box::new(PacketZcPartyBookingNotifyDelete::from(buffer, packetver));
    }
    if buffer[0] == 0x0c && buffer[1] == 0x08 {
        return Box::new(PacketCzSimpleCashBtnshow::from(buffer, packetver));
    }
    if buffer[0] == 0x0d && buffer[1] == 0x08 {
        return Box::new(PacketZcSimpleCashBtnshow::from(buffer, packetver));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x0e {
        return Box::new(PacketZcNotifyHpToGroupmR2::from(buffer, packetver));
    }
    if buffer[0] == 0x0f && buffer[1] == 0x08 {
        return Box::new(PacketZcAddExchangeItem2::from(buffer, packetver));
    }
    if buffer[0] == 0x10 && buffer[1] == 0x08 {
        return Box::new(PacketZcOpenBuyingStore::from(buffer, packetver));
    }
    if buffer[0] == 0x11 && buffer[1] == 0x08 {
        return Box::new(PacketCzReqOpenBuyingStore::from(buffer, packetver));
    }
    if buffer[0] == 0x12 && buffer[1] == 0x08 {
        return Box::new(PacketZcFailedOpenBuyingStoreToBuyer::from(buffer, packetver));
    }
    if buffer[0] == 0x13 && buffer[1] == 0x08 {
        return Box::new(PacketZcMyitemlistBuyingStore::from(buffer, packetver));
    }
    if buffer[0] == 0x14 && buffer[1] == 0x08 {
        return Box::new(PacketZcBuyingStoreEntry::from(buffer, packetver));
    }
    if buffer[0] == 0x15 && buffer[1] == 0x08 {
        return Box::new(PacketCzReqCloseBuyingStore::from(buffer, packetver));
    }
    if buffer[0] == 0x16 && buffer[1] == 0x08 {
        return Box::new(PacketZcDisappearBuyingStoreEntry::from(buffer, packetver));
    }
    if buffer[0] == 0x17 && buffer[1] == 0x08 {
        return Box::new(PacketCzReqClickToBuyingStore::from(buffer, packetver));
    }
    if buffer[0] == 0x18 && buffer[1] == 0x08 {
        return Box::new(PacketZcAckItemlistBuyingStore::from(buffer, packetver));
    }
    if buffer[0] == 0x19 && buffer[1] == 0x08 {
        return Box::new(PacketCzReqTradeBuyingStore::from(buffer, packetver));
    }
    if buffer[0] == 0x1a && buffer[1] == 0x08 {
        return Box::new(PacketZcFailedTradeBuyingStoreToBuyer::from(buffer, packetver));
    }
    if buffer[0] == 0x1b && buffer[1] == 0x08 {
        return Box::new(PacketZcUpdateItemFromBuyingStore::from(buffer, packetver));
    }
    if buffer[0] == 0x1c && buffer[1] == 0x08 {
        return Box::new(PacketZcItemDeleteBuyingStore::from(buffer, packetver));
    }
    if buffer[0] == 0x1d && buffer[1] == 0x08 {
        return Box::new(PacketZcElInit::from(buffer, packetver));
    }
    if buffer[0] == 0x1e && buffer[1] == 0x08 {
        return Box::new(PacketZcElParChange::from(buffer, packetver));
    }
    if buffer[0] == 0x1f && buffer[1] == 0x08 {
        return Box::new(PacketZcBroadcast4::from(buffer, packetver));
    }
    if buffer[0] == 0x20 && buffer[1] == 0x08 {
        return Box::new(PacketZcCostumeSpriteChange::from(buffer, packetver));
    }
    if buffer[0] == 0x21 && buffer[1] == 0x08 {
        return Box::new(PacketAcOtpUser::from(buffer, packetver));
    }
    if buffer[0] == 0x22 && buffer[1] == 0x08 {
        return Box::new(PacketCaOtpAuthReq::from(buffer, packetver));
    }
    if buffer[0] == 0x23 && buffer[1] == 0x08 {
        return Box::new(PacketAcOtpAuthAck::from(buffer, packetver));
    }
    if buffer[0] == 0x24 && buffer[1] == 0x08 {
        return Box::new(PacketZcFailedTradeBuyingStoreToSeller::from(buffer, packetver));
    }
    if buffer[0] == 0x5a && buffer[1] == 0x82 {
        return Box::new(PacketCaSsoLoginReqa::from(buffer, packetver));
    }
    if buffer[0] == 0x25 && buffer[1] == 0x08 {
        return Box::new(PacketCaSsoLoginReq::from(buffer, packetver));
    }
    if buffer[0] == 0x26 && buffer[1] == 0x08 {
        return Box::new(PacketAcSsoLoginAck::from(buffer, packetver));
    }
    if buffer[0] == 0x27 && buffer[1] == 0x08 {
        return Box::new(PacketChDeleteChar3Reserved::from(buffer, packetver));
    }
    if buffer[0] == 0x28 && buffer[1] == 0x08 {
        return Box::new(PacketHcDeleteChar3Reserved::from(buffer, packetver));
    }
    if buffer[0] == 0x29 && buffer[1] == 0x08 {
        return Box::new(PacketChDeleteChar3::from(buffer, packetver));
    }
    if buffer[0] == 0x2a && buffer[1] == 0x08 {
        return Box::new(PacketHcDeleteChar3::from(buffer, packetver));
    }
    if buffer[0] == 0x2b && buffer[1] == 0x08 {
        return Box::new(PacketChDeleteChar3Cancel::from(buffer, packetver));
    }
    if buffer[0] == 0x2c && buffer[1] == 0x08 {
        return Box::new(PacketHcDeleteChar3Cancel::from(buffer, packetver));
    }
    if buffer[0] == 0x35 && buffer[1] == 0x08 {
        return Box::new(PacketCzSearchStoreInfo::from(buffer, packetver));
    }
    if buffer[0] == 0x36 && buffer[1] == 0x08 {
        return Box::new(PacketZcSearchStoreInfoAck::from(buffer, packetver));
    }
    if buffer[0] == 0x37 && buffer[1] == 0x08 {
        return Box::new(PacketZcSearchStoreInfoFailed::from(buffer, packetver));
    }
    if buffer[0] == 0x38 && buffer[1] == 0x08 {
        return Box::new(PacketCzSearchStoreInfoNextPage::from(buffer, packetver));
    }
    if buffer[0] == 0x39 && buffer[1] == 0x08 {
        return Box::new(PacketZcAckBanGuildSso::from(buffer, packetver));
    }
    if buffer[0] == 0x3a && buffer[1] == 0x08 {
        return Box::new(PacketZcOpenSearchStoreInfo::from(buffer, packetver));
    }
    if buffer[0] == 0x3b && buffer[1] == 0x08 {
        return Box::new(PacketCzCloseSearchStoreInfo::from(buffer, packetver));
    }
    if buffer[0] == 0x3c && buffer[1] == 0x08 {
        return Box::new(PacketCzSsilistItemClick::from(buffer, packetver));
    }
    if buffer[0] == 0x3d && buffer[1] == 0x08 {
        return Box::new(PacketZcSsilistItemClickAck::from(buffer, packetver));
    }
    if buffer[0] == 0x3e && buffer[1] == 0x08 {
        return Box::new(PacketAcRefuseLoginR2::from(buffer, packetver));
    }
    if buffer[0] == 0x41 && buffer[1] == 0x08 {
        return Box::new(PacketChSelectAccessibleMapname::from(buffer, packetver));
    }
    if buffer[0] == 0x5f && buffer[1] == 0x03 {
        return Box::new(PacketCzRequestMove2::from(buffer, packetver));
    }
    if buffer[0] == 0xc5 && buffer[1] == 0x0a {
        return Box::new(PacketChSendMapInfo::from(buffer, packetver));
    }
    if buffer[0] == 0x2d && buffer[1] == 0x08 {
        return Box::new(PacketHcAcceptEnterNeoUnionHeader::from(buffer, packetver));
    }
    if buffer[0] == 0x87 && buffer[1] == 0x01 {
        return Box::new(PacketCzPing::from(buffer, packetver));
    }
    if buffer[0] == 0x87 && buffer[1] == 0x01 {
        return Box::new(PacketZcAid2::from(buffer, packetver));
    }
    if buffer[0] == 0x83 && buffer[1] == 0x02 {
        return Box::new(PacketMapConnection::from(buffer, packetver));
    }
    if buffer[0] == 0xb9 && buffer[1] == 0x08 {
        return Box::new(PacketPincodeLoginstate::from(buffer, packetver));
    }
    if buffer[0] == 0x39 && buffer[1] == 0x0a {
        return Box::new(PacketChMakeChar3::from(buffer, packetver));
    }
    if buffer[0] == 0x27 && buffer[1] == 0x08 {
        return Box::new(PacketChDeleteChar4Reserved::from(buffer, packetver));
    }
    if buffer[0] == 0x28 && buffer[1] == 0x08 {
        return Box::new(PacketHcDeleteChar4Reserved::from(buffer, packetver));
    }
    if buffer[0] == 0x18 && buffer[1] == 0x0b {
        return Box::new(PacketZcInventoryExpansionInfo::from(buffer, packetver));
    }
    if buffer[0] == 0xde && buffer[1] == 0x0a {
        return Box::new(PacketZcOverweightPercent::from(buffer, packetver));
    }
    if buffer[0] == 0x8a && buffer[1] == 0x01 {
        return Box::new(PacketCzReqDisconnect2::from(buffer, packetver));
    }
    if buffer[0] == 0x8b && buffer[1] == 0x01 {
        return Box::new(PacketZcReqDisconnectAck2::from(buffer, packetver));
    }
    if buffer[0] == 0x68 && buffer[1] == 0x03 {
        return Box::new(PacketCzReqnameall2::from(buffer, packetver));
    }
    if buffer[0] == 0x30 && buffer[1] == 0x0a {
        return Box::new(PacketZcAckReqnameall2::from(buffer, packetver));
    }
    if buffer[0] == 0x60 && buffer[1] == 0x03 {
        return Box::new(PacketCzRequestTime2::from(buffer, packetver));
    }
    if buffer[0] == 0xcd && buffer[1] == 0x09 {
        return Box::new(PacketZcMsgColor::from(buffer, packetver));
    }
    if buffer[0] == 0x9b && buffer[1] == 0x09 {
        return Box::new(PacketZcNotifyMapproperty2::from(buffer, packetver));
    }
    if buffer[0] == 0x3b && buffer[1] == 0x0a {
        return Box::new(PacketZcHatEffect::from(buffer, packetver));
    }
    if buffer[0] == 0x47 && buffer[1] == 0x04 {
        return Box::new(PacketCzBlockingPlayCancel::from(buffer, packetver));
    }
    if buffer[0] == 0x1B && buffer[1] == 0x0B {
        return Box::new(PacketZcLoadConfirm::from(buffer, packetver));
    }
    if buffer[0] == 0xff && buffer[1] == 0x09 {
        return Box::new(PacketZcNotifyStandentry6::from(buffer, packetver));
    }
    if buffer[0] == 0x15 && buffer[1] == 0x09 {
        return Box::new(PacketZcNotifyStandentry7::from(buffer, packetver));
    }
    if buffer[0] == 0xfd && buffer[1] == 0x09 {
        return Box::new(PacketZcNotifyMoveentry8::from(buffer, packetver));
    }
    if buffer[0] == 0xc8 && buffer[1] == 0x08 {
        return Box::new(PacketZcNotifyAct3::from(buffer, packetver));
    }
    Box::new(PacketUnknown::from(buffer))
}

pub fn parse_json(json: &str, packetver: u32) -> Result<Box<dyn Packet>, String> {
    let entries: Vec<json_flat_parser::FlatJsonValue<&str>> = json_flat_parser::JSONParser::parse(json, json_flat_parser::ParseOptions::default().keep_object_raw_data(false))?.json;
    if let Some(packet_id) = entries.iter().find(|entry| entry.pointer.pointer.eq("/packet_id")){
    if packetver >= 20170607 && packet_id.value.unwrap().eq("0x0871") {
        return  PacketCzEnter2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packetver >= 20140402 && packet_id.value.unwrap().eq("0x088A") {
        return  PacketCzReqname::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packetver >= 20131223 && packet_id.value.unwrap().eq("0x096A") {
        return  PacketCzReqname::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packetver >= 20130515 && packet_id.value.unwrap().eq("0x0437") {
        return  PacketCzRequestMove::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packetver >= 20120702 && packet_id.value.unwrap().eq("0x0953") {
        return  PacketCzRequestMove::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packetver >= 20120307 && packet_id.value.unwrap().eq("0x0887") {
        return  PacketCzRequestTime::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packetver >= 20120307 && packet_id.value.unwrap().eq("0x0437") {
        return  PacketCzRequestMove::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packetver >= 20120307 && packet_id.value.unwrap().eq("0x0885") {
        return  PacketCzRequestAct::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packetver >= 20120307 && packet_id.value.unwrap().eq("0x0865") {
        return  PacketCzItemPickup::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packetver >= 20120307 && packet_id.value.unwrap().eq("0x02c4") {
        return  PacketCzItemThrow::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packetver >= 20120307 && packet_id.value.unwrap().eq("0x0439") {
        return  PacketCzUseItem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packetver >= 20120307 && packet_id.value.unwrap().eq("0x0889") {
        return  PacketCzUseSkill::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packetver >= 20120307 && packet_id.value.unwrap().eq("0x086A") {
        return  PacketCzEnter2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packetver >= 20120218 && packet_id.value.unwrap().eq("0x096A") {
        return  PacketCzReqname::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packetver >= 20111102 && packet_id.value.unwrap().eq("0x083C") {
        return  PacketCzEnter2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packetver >= 20111005 && packet_id.value.unwrap().eq("0x0817") {
        return  PacketCzRequestTime::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packetver >= 20111005 && packet_id.value.unwrap().eq("0x0364") {
        return  PacketCzRequestMove::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packetver >= 20111005 && packet_id.value.unwrap().eq("0x088A") {
        return  PacketCzReqname::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packetver >= 20101124 && packet_id.value.unwrap().eq("0x035f") {
        return  PacketCzRequestMove::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packetver >= 20070227 && packet_id.value.unwrap().eq("0x2c4") {
        return  PacketCzPartyJoinReq::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x64") {
        return PacketCaLogin::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0065") {
        return PacketChEnter::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0066") {
        return PacketChSelectChar::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0067") {
        return PacketChMakeChar::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0970") {
        return PacketChMakeChar2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0068") {
        return PacketChDeleteChar::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0069") {
        return PacketAcAcceptLogin::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0ac4") {
        return PacketAcAcceptLogin2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x006a") {
        return PacketAcRefuseLogin::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x006b") {
        return PacketHcAcceptEnterNeoUnion::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x006c") {
        return PacketHcRefuseEnter::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x006d") {
        return PacketHcAcceptMakecharNeoUnion::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x006e") {
        return PacketHcRefuseMakechar::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x006f") {
        return PacketHcAcceptDeletechar::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0070") {
        return PacketHcRefuseDeletechar::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0071") {
        return PacketHcNotifyZonesvr::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0072") {
        return PacketCzEnter::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0073") {
        return PacketZcAcceptEnter::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0074") {
        return PacketZcRefuseEnter::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0075") {
        return PacketZcNotifyInitchar::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0076") {
        return PacketZcNotifyUpdatechar::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0077") {
        return PacketZcNotifyUpdateplayer::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0078") {
        return PacketZcNotifyStandentry::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0079") {
        return PacketZcNotifyNewentry::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7a") {
        return PacketZcNotifyActentry::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7b") {
        return PacketZcNotifyMoveentry::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7c") {
        return PacketZcNotifyStandentryNpc::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7d") {
        return PacketCzNotifyActorinit::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7e") {
        return PacketCzRequestTime::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7f") {
        return PacketZcNotifyTime::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x80") {
        return PacketZcNotifyVanish::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x81") {
        return PacketScNotifyBan::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x82") {
        return PacketCzRequestQuit::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x83") {
        return PacketZcAcceptQuit::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x84") {
        return PacketZcRefuseQuit::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x85") {
        return PacketCzRequestMove::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x86") {
        return PacketZcNotifyMove::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x87") {
        return PacketZcNotifyPlayermove::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x88") {
        return PacketZcStopmove::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x89") {
        return PacketCzRequestAct::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x8a") {
        return PacketZcNotifyAct::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x8b") {
        return PacketZcNotifyActPosition::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x8c") {
        return PacketCzRequestChat::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x8d") {
        return PacketZcNotifyChat::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x8e") {
        return PacketZcNotifyPlayerchat::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x8f") {
        return PacketServerEntryAck::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x90") {
        return PacketCzContactnpc::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x91") {
        return PacketZcNpcackMapmove::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x92") {
        return PacketZcNpcackServermove::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x93") {
        return PacketZcNpcackEnable::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x94") {
        return PacketCzReqname::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x95") {
        return PacketZcAckReqname::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x96") {
        return PacketCzWhisper::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x97") {
        return PacketZcWhisper::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x98") {
        return PacketZcAckWhisper::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x99") {
        return PacketCzBroadcast::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x9a") {
        return PacketZcBroadcast::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x9b") {
        return PacketCzChangeDirection::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x9c") {
        return PacketZcChangeDirection::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x9d") {
        return PacketZcItemEntry::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x9e") {
        return PacketZcItemFallEntry::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x9f") {
        return PacketCzItemPickup::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xa0") {
        return PacketZcItemPickupAck::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xa1") {
        return PacketZcItemDisappear::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xa2") {
        return PacketCzItemThrow::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xa3") {
        return PacketZcNormalItemlist::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xa4") {
        return PacketZcEquipmentItemlist::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xa5") {
        return PacketZcStoreNormalItemlist::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xa6") {
        return PacketZcStoreEquipmentItemlist::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xa7") {
        return PacketCzUseItem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xa8") {
        return PacketZcUseItemAck::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xa9") {
        return PacketCzReqWearEquip::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xaa") {
        return PacketZcReqWearEquipAck::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x08d0") {
        return PacketZcReqWearEquipAck2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xab") {
        return PacketCzReqTakeoffEquip::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xac") {
        return PacketZcReqTakeoffEquipAck::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x08d1") {
        return PacketZcReqTakeoffEquipAck2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xaf") {
        return PacketZcItemThrowAck::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xb0") {
        return PacketZcParChange::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xb1") {
        return PacketZcLongparChange::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xb2") {
        return PacketCzRestart::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xb3") {
        return PacketZcRestartAck::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xb4") {
        return PacketZcSayDialog::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xb5") {
        return PacketZcWaitDialog::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xb6") {
        return PacketZcCloseDialog::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xb7") {
        return PacketZcMenuList::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xb8") {
        return PacketCzChooseMenu::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xb9") {
        return PacketCzReqNextScript::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xba") {
        return PacketCzReqStatus::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xbb") {
        return PacketCzStatusChange::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xbc") {
        return PacketZcStatusChangeAck::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xbd") {
        return PacketZcStatus::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xbe") {
        return PacketZcStatusChange::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xbf") {
        return PacketCzReqEmotion::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xc0") {
        return PacketZcEmotion::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xc1") {
        return PacketCzReqUserCount::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xc2") {
        return PacketZcUserCount::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xc3") {
        return PacketZcSpriteChange::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xc4") {
        return PacketZcSelectDealtype::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xc5") {
        return PacketCzAckSelectDealtype::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xc6") {
        return PacketZcPcPurchaseItemlist::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xc7") {
        return PacketZcPcSellItemlist::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xc8") {
        return PacketCzPcPurchaseItemlist::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xc9") {
        return PacketCzPcSellItemlist::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xca") {
        return PacketZcPcPurchaseResult::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xcb") {
        return PacketZcPcSellResult::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xcc") {
        return PacketCzDisconnectCharacter::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xcd") {
        return PacketZcAckDisconnectCharacter::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xce") {
        return PacketCzDisconnectAllCharacter::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xcf") {
        return PacketCzSettingWhisperPc::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xd0") {
        return PacketCzSettingWhisperState::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xd1") {
        return PacketZcSettingWhisperPc::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xd2") {
        return PacketZcSettingWhisperState::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xd3") {
        return PacketCzReqWhisperList::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xd4") {
        return PacketZcWhisperList::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xd5") {
        return PacketCzCreateChatroom::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xd6") {
        return PacketZcAckCreateChatroom::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xd7") {
        return PacketZcRoomNewentry::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xd8") {
        return PacketZcDestroyRoom::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xd9") {
        return PacketCzReqEnterRoom::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xda") {
        return PacketZcRefuseEnterRoom::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xdb") {
        return PacketZcEnterRoom::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xdc") {
        return PacketZcMemberNewentry::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xdd") {
        return PacketZcMemberExit::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xde") {
        return PacketCzChangeChatroom::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xdf") {
        return PacketZcChangeChatroom::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xe0") {
        return PacketCzReqRoleChange::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xe1") {
        return PacketZcRoleChange::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xe2") {
        return PacketCzReqExpelMember::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xe3") {
        return PacketCzExitRoom::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xe4") {
        return PacketCzReqExchangeItem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xe5") {
        return PacketZcReqExchangeItem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xe6") {
        return PacketCzAckExchangeItem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xe7") {
        return PacketZcAckExchangeItem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xe8") {
        return PacketCzAddExchangeItem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xe9") {
        return PacketZcAddExchangeItem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xea") {
        return PacketZcAckAddExchangeItem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xeb") {
        return PacketCzConcludeExchangeItem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xec") {
        return PacketZcConcludeExchangeItem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xed") {
        return PacketCzCancelExchangeItem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xee") {
        return PacketZcCancelExchangeItem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xef") {
        return PacketCzExecExchangeItem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xf0") {
        return PacketZcExecExchangeItem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xf1") {
        return PacketZcExchangeitemUndo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xf2") {
        return PacketZcNotifyStoreitemCountinfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xf3") {
        return PacketCzPlayerChat::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xf4") {
        return PacketZcAddItemToStore::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xf5") {
        return PacketCzMoveItemFromStoreToBody::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xf6") {
        return PacketZcDeleteItemFromStore::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xf7") {
        return PacketCzCloseStore::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xf8") {
        return PacketZcCloseStore::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xf9") {
        return PacketCzMakeGroup::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xfa") {
        return PacketZcAckMakeGroup::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xfb") {
        return PacketZcGroupList::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xfc") {
        return PacketCzReqJoinGroup::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xfd") {
        return PacketZcAckReqJoinGroup::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xfe") {
        return PacketZcReqJoinGroup::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xff") {
        return PacketCzJoinGroup::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x100") {
        return PacketCzReqLeaveGroup::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x101") {
        return PacketZcGroupinfoChange::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x102") {
        return PacketCzChangeGroupexpoption::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x103") {
        return PacketCzReqExpelGroupMember::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x104") {
        return PacketZcAddMemberToGroup::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x105") {
        return PacketZcDeleteMemberFromGroup::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x106") {
        return PacketZcNotifyHpToGroupm::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x107") {
        return PacketZcNotifyPositionToGroupm::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x108") {
        return PacketCzRequestChatParty::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x109") {
        return PacketZcNotifyChatParty::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x10a") {
        return PacketZcMvpGettingItem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x10b") {
        return PacketZcMvpGettingSpecialExp::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x10c") {
        return PacketZcMvp::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x10d") {
        return PacketZcThrowMvpitem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x10e") {
        return PacketZcSkillinfoUpdate::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x10f") {
        return PacketZcSkillinfoList::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x110") {
        return PacketZcAckTouseskill::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x111") {
        return PacketZcAddSkill::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x112") {
        return PacketCzUpgradeSkilllevel::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x113") {
        return PacketCzUseSkill::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x114") {
        return PacketZcNotifySkill::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x115") {
        return PacketZcNotifySkillPosition::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x116") {
        return PacketCzUseSkillToground::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x117") {
        return PacketZcNotifyGroundskill::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x118") {
        return PacketCzCancelLockon::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x119") {
        return PacketZcStateChange::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x11a") {
        return PacketZcUseSkill::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x11b") {
        return PacketCzSelectWarppoint::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x11c") {
        return PacketZcWarplist::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x11d") {
        return PacketCzRememberWarppoint::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x11e") {
        return PacketZcAckRememberWarppoint::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x11f") {
        return PacketZcSkillEntry::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x120") {
        return PacketZcSkillDisappear::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x121") {
        return PacketZcNotifyCartitemCountinfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x122") {
        return PacketZcCartEquipmentItemlist::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x123") {
        return PacketZcCartNormalItemlist::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x124") {
        return PacketZcAddItemToCart::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x125") {
        return PacketZcDeleteItemFromCart::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x126") {
        return PacketCzMoveItemFromBodyToCart::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x127") {
        return PacketCzMoveItemFromCartToBody::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x128") {
        return PacketCzMoveItemFromStoreToCart::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x129") {
        return PacketCzMoveItemFromCartToStore::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x12a") {
        return PacketCzReqCartoff::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x12b") {
        return PacketZcCartoff::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x12c") {
        return PacketZcAckAdditemToCart::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x12d") {
        return PacketZcOpenstore::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x12e") {
        return PacketCzReqClosestore::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x12f") {
        return PacketCzReqOpenstore::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x130") {
        return PacketCzReqBuyFrommc::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x131") {
        return PacketZcStoreEntry::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x132") {
        return PacketZcDisappearEntry::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x133") {
        return PacketZcPcPurchaseItemlistFrommc::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x134") {
        return PacketCzPcPurchaseItemlistFrommc::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x135") {
        return PacketZcPcPurchaseResultFrommc::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x136") {
        return PacketZcPcPurchaseMyitemlist::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x137") {
        return PacketZcDeleteitemFromMcstore::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x138") {
        return PacketCzPkmodeChange::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x139") {
        return PacketZcAttackFailureForDistance::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x013a") {
        return PacketZcAttackRange::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x13b") {
        return PacketZcActionFailure::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x13c") {
        return PacketZcEquipArrow::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x13d") {
        return PacketZcRecovery::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x13e") {
        return PacketZcUseskillAck::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x013f") {
        return PacketCzItemCreate::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0140") {
        return PacketCzMovetoMap::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0141") {
        return PacketZcStatusValues::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0142") {
        return PacketZcOpenEditdlg::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0143") {
        return PacketCzInputEditdlg::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0144") {
        return PacketZcCompass::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0145") {
        return PacketZcShowImage::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0146") {
        return PacketCzCloseDialog::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0147") {
        return PacketZcAutorunSkill::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0148") {
        return PacketZcResurrection::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0149") {
        return PacketCzReqGiveMannerPoint::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x014a") {
        return PacketZcAckGiveMannerPoint::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x014b") {
        return PacketZcNotifyMannerPointGiven::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x014c") {
        return PacketZcMyguildBasicInfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x14d") {
        return PacketCzReqGuildMenuinterface::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x14e") {
        return PacketZcAckGuildMenuinterface::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x14f") {
        return PacketCzReqGuildMenu::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x150") {
        return PacketZcGuildInfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x151") {
        return PacketCzReqGuildEmblemImg::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x152") {
        return PacketZcGuildEmblemImg::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x153") {
        return PacketCzRegisterGuildEmblemImg::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x154") {
        return PacketZcMembermgrInfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x155") {
        return PacketCzReqChangeMemberpos::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x156") {
        return PacketZcAckReqChangeMembers::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x157") {
        return PacketCzReqOpenMemberInfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x158") {
        return PacketZcAckOpenMemberInfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x159") {
        return PacketCzReqLeaveGuild::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x15a") {
        return PacketZcAckLeaveGuild::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x15b") {
        return PacketCzReqBanGuild::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x15c") {
        return PacketZcAckBanGuild::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x15d") {
        return PacketCzReqDisorganizeGuild::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x15e") {
        return PacketZcAckDisorganizeGuildResult::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x15f") {
        return PacketZcAckDisorganizeGuild::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x160") {
        return PacketZcPositionInfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x161") {
        return PacketCzRegChangeGuildPositioninfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x162") {
        return PacketZcGuildSkillinfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x163") {
        return PacketZcBanList::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x164") {
        return PacketZcOtherGuildList::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x165") {
        return PacketCzReqMakeGuild::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x166") {
        return PacketZcPositionIdNameInfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x167") {
        return PacketZcResultMakeGuild::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x168") {
        return PacketCzReqJoinGuild::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x169") {
        return PacketZcAckReqJoinGuild::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x16a") {
        return PacketZcReqJoinGuild::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x16b") {
        return PacketCzJoinGuild::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x16c") {
        return PacketZcUpdateGdid::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x16d") {
        return PacketZcUpdateCharstat::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x16e") {
        return PacketCzGuildNotice::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x16f") {
        return PacketZcGuildNotice::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x170") {
        return PacketCzReqAllyGuild::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x171") {
        return PacketZcReqAllyGuild::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x172") {
        return PacketCzAllyGuild::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x173") {
        return PacketZcAckReqAllyGuild::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x174") {
        return PacketZcAckChangeGuildPositioninfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x175") {
        return PacketCzReqGuildMemberInfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x176") {
        return PacketZcAckGuildMemberInfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x177") {
        return PacketZcItemidentifyList::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x178") {
        return PacketCzReqItemidentify::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x179") {
        return PacketZcAckItemidentify::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x17a") {
        return PacketCzReqItemcompositionList::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x17b") {
        return PacketZcItemcompositionList::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x17c") {
        return PacketCzReqItemcomposition::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x17d") {
        return PacketZcAckItemcomposition::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x17e") {
        return PacketCzGuildChat::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x17f") {
        return PacketZcGuildChat::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x180") {
        return PacketCzReqHostileGuild::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x181") {
        return PacketZcAckReqHostileGuild::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x182") {
        return PacketZcMemberAdd::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x183") {
        return PacketCzReqDeleteRelatedGuild::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x184") {
        return PacketZcDeleteRelatedGuild::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x185") {
        return PacketZcAddRelatedGuild::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x186") {
        return PacketCollectordead::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x187") {
        return PacketPing::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x188") {
        return PacketZcAckItemrefining::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x189") {
        return PacketZcNotifyMapinfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x18a") {
        return PacketCzReqDisconnect::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x18b") {
        return PacketZcAckReqDisconnect::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x18c") {
        return PacketZcMonsterInfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x18d") {
        return PacketZcMakableitemlist::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x18e") {
        return PacketCzReqmakingitem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x18f") {
        return PacketZcAckReqmakingitem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x190") {
        return PacketCzUseSkillTogroundWithtalkbox::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x191") {
        return PacketZcTalkboxChatcontents::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x192") {
        return PacketZcUpdateMapinfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x193") {
        return PacketCzReqnameBygid::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x194") {
        return PacketZcAckReqnameBygid::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x195") {
        return PacketZcAckReqnameall::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x196") {
        return PacketZcMsgStateChange::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x197") {
        return PacketCzReset::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x198") {
        return PacketCzChangeMaptype::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x199") {
        return PacketZcNotifyMapproperty::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x19a") {
        return PacketZcNotifyRanking::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x19b") {
        return PacketZcNotifyEffect::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x19d") {
        return PacketCzChangeEffectstate::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x19e") {
        return PacketZcStartCapture::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x19f") {
        return PacketCzTrycaptureMonster::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1a0") {
        return PacketZcTrycaptureMonster::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1a1") {
        return PacketCzCommandPet::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1a2") {
        return PacketZcPropertyPet::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1a3") {
        return PacketZcFeedPet::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1a4") {
        return PacketZcChangestatePet::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1a5") {
        return PacketCzRenamePet::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1a6") {
        return PacketZcPeteggList::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1a7") {
        return PacketCzSelectPetegg::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1a8") {
        return PacketCzPeteggInfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1a9") {
        return PacketCzPetAct::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1aa") {
        return PacketZcPetAct::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1ab") {
        return PacketZcParChangeUser::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1ac") {
        return PacketZcSkillUpdate::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1ad") {
        return PacketZcMakingarrowList::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1ae") {
        return PacketCzReqMakingarrow::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1af") {
        return PacketCzReqChangecart::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1b0") {
        return PacketZcNpcspriteChange::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1b1") {
        return PacketZcShowdigit::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1b2") {
        return PacketCzReqOpenstore2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xb301") {
        return PacketZcShowImage2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1b4") {
        return PacketZcChangeGuild::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1b5") {
        return PacketScBillingInfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1b6") {
        return PacketZcGuildInfo2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1b7") {
        return PacketCzGuildZeny::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1b8") {
        return PacketZcGuildZenyAck::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1b9") {
        return PacketZcDispel::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1ba") {
        return PacketCzRemoveAid::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1bb") {
        return PacketCzShift::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1bc") {
        return PacketCzRecall::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1bd") {
        return PacketCzRecallGid::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1be") {
        return PacketAcAskPngameroom::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1bf") {
        return PacketCaReplyPngameroom::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1c0") {
        return PacketCzReqRemaintime::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1c1") {
        return PacketZcReplyRemaintime::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1c2") {
        return PacketZcInfoRemaintime::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1c3") {
        return PacketZcBroadcast2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1c4") {
        return PacketZcAddItemToStore2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1c5") {
        return PacketZcAddItemToCart2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1c6") {
        return PacketCsReqEncryption::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1c7") {
        return PacketScAckEncryption::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x01c8") {
        return PacketZcUseItemAck2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1c9") {
        return PacketZcSkillEntry2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1ca") {
        return PacketCzReqmakinghomun::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1cb") {
        return PacketCzMonsterTalk::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1cc") {
        return PacketZcMonsterTalk::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1cd") {
        return PacketZcAutospelllist::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1ce") {
        return PacketCzSelectautospell::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1cf") {
        return PacketZcDevotionlist::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1d0") {
        return PacketZcSpirits::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1d1") {
        return PacketZcBladestop::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1d2") {
        return PacketZcCombodelay::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1d3") {
        return PacketZcSound::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xd401") {
        return PacketZcOpenEditdlgstr::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0xd501") {
        return PacketCzInputEditdlgstr::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1d6") {
        return PacketZcNotifyMaptypeproperty2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x01d7") {
        return PacketZcSpriteChange2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1d8") {
        return PacketZcNotifyStandentry2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1d9") {
        return PacketZcNotifyNewentry2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1da") {
        return PacketZcNotifyMoveentry2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1db") {
        return PacketCaReqHash::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1dc") {
        return PacketAcAckHash::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1dd") {
        return PacketCaLogin2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1de") {
        return PacketZcNotifySkill2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1df") {
        return PacketCzReqAccountname::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1e0") {
        return PacketZcAckAccountname::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1e1") {
        return PacketZcSpirits2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1e2") {
        return PacketZcReqCouple::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1e3") {
        return PacketCzJoinCouple::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1e4") {
        return PacketZcStartCouple::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1e5") {
        return PacketCzReqJoinCouple::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1e6") {
        return PacketZcCouplename::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1e7") {
        return PacketCzDoridori::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1e8") {
        return PacketCzMakeGroup2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1e9") {
        return PacketZcAddMemberToGroup2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1ea") {
        return PacketZcCongratulation::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1eb") {
        return PacketZcNotifyPositionToGuildm::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1ec") {
        return PacketZcGuildMemberMapChange::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1ed") {
        return PacketCzChopokgi::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1ee") {
        return PacketZcNormalItemlist2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1ef") {
        return PacketZcCartNormalItemlist2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1f0") {
        return PacketZcStoreNormalItemlist2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1f1") {
        return PacketAcNotifyError::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1f2") {
        return PacketZcUpdateCharstat2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1f3") {
        return PacketZcNotifyEffect2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1f4") {
        return PacketZcReqExchangeItem2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1f5") {
        return PacketZcAckExchangeItem2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1f6") {
        return PacketZcReqBaby::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1f7") {
        return PacketCzJoinBaby::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1f8") {
        return PacketZcStartBaby::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1f9") {
        return PacketCzReqJoinBaby::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1fa") {
        return PacketCaLogin3::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1fb") {
        return PacketChDeleteChar2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1fc") {
        return PacketZcRepairitemlist::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1fd") {
        return PacketCzReqItemrepair::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1fe") {
        return PacketZcAckItemrepair::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x1ff") {
        return PacketZcHighjump::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x200") {
        return PacketCaConnectInfoChanged::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x201") {
        return PacketZcFriendsList::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x202") {
        return PacketCzAddFriends::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x203") {
        return PacketCzDeleteFriends::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x204") {
        return PacketCaExeHashcheck::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x205") {
        return PacketZcDivorce::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x206") {
        return PacketZcFriendsState::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x207") {
        return PacketZcReqAddFriends::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x208") {
        return PacketCzAckReqAddFriends::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x209") {
        return PacketZcAddFriendsList::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x20a") {
        return PacketZcDeleteFriends::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x020b") {
        return PacketAcRefuseLoginR3::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x20c") {
        return PacketCzExeHashcheck::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x20d") {
        return PacketHcBlockCharacter::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x20e") {
        return PacketZcStarskill::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x20f") {
        return PacketCzReqPvppoint::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x210") {
        return PacketZcAckPvppoint::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x211") {
        return PacketZhMovePvpworld::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x212") {
        return PacketCzReqGiveMannerByname::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x213") {
        return PacketCzReqStatusGm::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x214") {
        return PacketZcAckStatusGm::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x215") {
        return PacketZcSkillmsg::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x216") {
        return PacketZcBabymsg::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x217") {
        return PacketCzBlacksmithRank::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x218") {
        return PacketCzAlchemistRank::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x219") {
        return PacketZcBlacksmithRank::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x21a") {
        return PacketZcAlchemistRank::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x21b") {
        return PacketZcBlacksmithPoint::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x21c") {
        return PacketZcAlchemistPoint::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x21d") {
        return PacketCzLesseffect::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x21e") {
        return PacketZcLesseffect::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x21f") {
        return PacketZcNotifyPkinfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x220") {
        return PacketZcNotifyCrazykiller::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x221") {
        return PacketZcNotifyWeaponitemlist::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x222") {
        return PacketCzReqWeaponrefine::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x223") {
        return PacketZcAckWeaponrefine::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x224") {
        return PacketZcTaekwonPoint::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x225") {
        return PacketCzTaekwonRank::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x226") {
        return PacketZcTaekwonRank::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x227") {
        return PacketZcGameGuard::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x228") {
        return PacketCzAckGameGuard::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x229") {
        return PacketZcStateChange3::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x22a") {
        return PacketZcNotifyStandentry3::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x22b") {
        return PacketZcNotifyNewentry3::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x22c") {
        return PacketZcNotifyMoveentry3::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x22d") {
        return PacketCzCommandMer::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x22e") {
        return PacketZcPropertyHomun::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x230") {
        return PacketZcChangestateMer::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x231") {
        return PacketCzRenameMer::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x232") {
        return PacketCzRequestMovenpc::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x233") {
        return PacketCzRequestActnpc::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x234") {
        return PacketCzRequestMovetoowner::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x23a") {
        return PacketZcReqStorePassword::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x23b") {
        return PacketCzAckStorePassword::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x23c") {
        return PacketZcResultStorePassword::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x23d") {
        return PacketAcEventResult::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x23e") {
        return PacketHcRequestCharacterPassword::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x23f") {
        return PacketCzMailGetList::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x240") {
        return PacketZcMailReqGetList::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x241") {
        return PacketCzMailOpen::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x242") {
        return PacketZcMailReqOpen::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x243") {
        return PacketCzMailDelete::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x244") {
        return PacketCzMailGetItem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x245") {
        return PacketZcMailReqGetItem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x246") {
        return PacketCzMailResetItem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x247") {
        return PacketCzMailAddItem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x248") {
        return PacketCzMailSend::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x249") {
        return PacketZcMailReqSend::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x24a") {
        return PacketZcMailReceive::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x24b") {
        return PacketCzAuctionCreate::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x24c") {
        return PacketCzAuctionAddItem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x24d") {
        return PacketCzAuctionAdd::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x24e") {
        return PacketCzAuctionAddCancel::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x24f") {
        return PacketCzAuctionBuy::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x250") {
        return PacketZcAuctionResult::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x251") {
        return PacketCzAuctionItemSearch::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x252") {
        return PacketZcAuctionItemReqSearch::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x253") {
        return PacketZcStarplace::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x254") {
        return PacketCzAgreeStarplace::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x255") {
        return PacketZcAckMailAddItem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x256") {
        return PacketZcAckAuctionAddItem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x257") {
        return PacketZcAckMailDelete::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x258") {
        return PacketCaReqGameGuardCheck::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x259") {
        return PacketAcAckGameGuard::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x25a") {
        return PacketZcMakingitemList::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x25b") {
        return PacketCzReqMakingitem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x25c") {
        return PacketCzAuctionReqMyInfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x25d") {
        return PacketCzAuctionReqMySellStop::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x25e") {
        return PacketZcAuctionAckMySellStop::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x25f") {
        return PacketZcAuctionWindows::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x260") {
        return PacketZcMailWindows::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x261") {
        return PacketAcReqLoginOldekey::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x262") {
        return PacketAcReqLoginNewekey::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x263") {
        return PacketAcReqLoginCardpass::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x264") {
        return PacketCaAckLoginOldekey::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x265") {
        return PacketCaAckLoginNewekey::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x266") {
        return PacketCaAckLoginCardpass::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x267") {
        return PacketAcAckEkeyFailNotexist::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x268") {
        return PacketAcAckEkeyFailNotusesekey::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x269") {
        return PacketAcAckEkeyFailNotusedekey::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x26a") {
        return PacketAcAckEkeyFailAuthrefuse::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x26b") {
        return PacketAcAckEkeyFailInputekey::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x26c") {
        return PacketAcAckEkeyFailNotice::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x26d") {
        return PacketAcAckEkeyFailNeedcardpass::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x26e") {
        return PacketAcAckAuthekeyFailNotmatchcardpass::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x26f") {
        return PacketAcAckFirstLogin::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x270") {
        return PacketAcReqLoginAccountInfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x271") {
        return PacketCaAckLoginAccountInfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x272") {
        return PacketAcAckPtIdInfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x273") {
        return PacketCzReqMailReturn::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x274") {
        return PacketZcAckMailReturn::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x275") {
        return PacketChEnter2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x276") {
        return PacketCaAcceptLogin2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x277") {
        return PacketCaLoginPcbang::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x278") {
        return PacketZcNotifyPcbang::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x279") {
        return PacketCzHuntinglist::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x27a") {
        return PacketZcHuntinglist::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x27b") {
        return PacketZcPcbangEffect::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x27c") {
        return PacketCaLogin4::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x27d") {
        return PacketZcPropertyMerce::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x27e") {
        return PacketZcShandaProtect::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x27f") {
        return PacketCaClientType::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x280") {
        return PacketZcGangsiPoint::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x281") {
        return PacketCzGangsiRank::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x282") {
        return PacketZcGangsiRank::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x283") {
        return PacketZcAid::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x284") {
        return PacketZcNotifyEffect3::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x285") {
        return PacketZcDeathQuestion::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x286") {
        return PacketCzDeathQuestion::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x287") {
        return PacketZcPcCashPointItemlist::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x288") {
        return PacketCzPcBuyCashPointItem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x289") {
        return PacketZcPcCashPointUpdate::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x28a") {
        return PacketZcNpcShowefstUpdate::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x28c") {
        return PacketChSelectCharGoingtobeused::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x28d") {
        return PacketChReqIsValidCharname::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x28e") {
        return PacketHcAckIsValidCharname::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x28f") {
        return PacketChReqChangeCharname::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x290") {
        return PacketHcAckChangeCharname::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x291") {
        return PacketZcMsg::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x292") {
        return PacketCzStandingResurrection::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x293") {
        return PacketZcBossInfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x294") {
        return PacketZcReadBook::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x295") {
        return PacketZcEquipmentItemlist2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x296") {
        return PacketZcStoreEquipmentItemlist2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x297") {
        return PacketZcCartEquipmentItemlist2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x298") {
        return PacketZcCashTimeCounter::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x299") {
        return PacketZcCashItemDelete::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x29a") {
        return PacketZcItemPickupAck2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x29b") {
        return PacketZcMerInit::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x29c") {
        return PacketZcMerProperty::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x29d") {
        return PacketZcMerSkillinfoList::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x29e") {
        return PacketZcMerSkillinfoUpdate::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x29f") {
        return PacketCzMerCommand::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2a0") {
        return UnusedPacketCzMerUseSkill::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2a1") {
        return UnusedPacketCzMerUpgradeSkilllevel::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2a2") {
        return PacketZcMerParChange::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2a3") {
        return PacketZcGameguardLingoKey::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2a5") {
        return PacketCzKsyEvent::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2aa") {
        return PacketZcReqCashPassword::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2ab") {
        return PacketCzAckCashPassword::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2ac") {
        return PacketZcResultCashPassword::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2ad") {
        return PacketAcRequestSecondPassword::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2b0") {
        return PacketCaLoginHan::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2b1") {
        return PacketZcAllQuestList::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2b2") {
        return PacketZcAllQuestMission::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2b3") {
        return PacketZcAddQuest::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2b4") {
        return PacketZcDelQuest::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2b5") {
        return PacketZcUpdateMissionHunt::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2b6") {
        return PacketCzActiveQuest::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2b7") {
        return PacketZcActiveQuest::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2b8") {
        return PacketZcItemPickupParty::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2b9") {
        return PacketZcShortcutKeyList::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2ba") {
        return PacketCzShortcutKeyChange::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2bb") {
        return PacketZcEquipitemDamaged::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2bc") {
        return PacketZcNotifyPcbangPlayingTime::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2bf") {
        return PacketZcSrpacketr2Init::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2c0") {
        return PacketCzSrpacketr2Start::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x02c1") {
        return PacketZcNpcChat::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2c2") {
        return PacketZcFormatstringMsg::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2c5") {
        return PacketZcPartyJoinReqAck::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2c6") {
        return PacketZcPartyJoinReq::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2c7") {
        return PacketCzPartyJoinReqAck::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2c8") {
        return PacketCzPartyConfig::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2c9") {
        return PacketZcPartyConfig::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2ca") {
        return PacketHcRefuseSelectchar::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2cb") {
        return PacketZcMemorialdungeonSubscriptionInfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2cc") {
        return PacketZcMemorialdungeonSubscriptionNotify::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2cd") {
        return PacketZcMemorialdungeonInfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2ce") {
        return PacketZcMemorialdungeonNotify::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2cf") {
        return PacketCzMemorialdungeonCommand::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x02d0") {
        return PacketZcEquipmentItemlist3::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x02d1") {
        return PacketZcStoreEquipmentItemlist3::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x02d2") {
        return PacketZcCartEquipmentItemlist3::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x02d3") {
        return PacketZcNotifyBindOnEquip::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x02d4") {
        return PacketZcItemPickupAck3::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2d5") {
        return PacketZcIsvrDisconnect::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2d6") {
        return PacketCzEquipwinMicroscope::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2d7") {
        return PacketZcEquipwinMicroscope::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2d8") {
        return PacketCzConfig::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2d9") {
        return PacketZcConfig::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2da") {
        return PacketZcConfigNotify::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2db") {
        return PacketCzBattlefieldChat::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2dc") {
        return PacketZcBattlefieldChat::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2dd") {
        return PacketZcBattlefieldNotifyCampinfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2de") {
        return PacketZcBattlefieldNotifyPoint::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2df") {
        return PacketZcBattlefieldNotifyPosition::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2e0") {
        return PacketZcBattlefieldNotifyHp::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2e1") {
        return PacketZcNotifyAct2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2e6") {
        return PacketCzBotCheck::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2e7") {
        return PacketZcMapproperty::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x02e8") {
        return PacketZcNormalItemlist3::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x02e9") {
        return PacketZcCartNormalItemlist3::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x02ea") {
        return PacketZcStoreNormalItemlist3::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x02eb") {
        return PacketZcAcceptEnter2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x02ec") {
        return PacketZcNotifyMoveentry4::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x02ed") {
        return PacketZcNotifyNewentry4::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x02ee") {
        return PacketZcNotifyStandentry4::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x02ef") {
        return PacketZcNotifyFont::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2f0") {
        return PacketZcProgress::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2f1") {
        return PacketCzProgress::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x2f2") {
        return PacketZcProgressCancel::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x35c") {
        return PacketCzOpenSimpleCashshopItemlist::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x35d") {
        return PacketZcSimpleCashshopPointItemlist::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x35e") {
        return PacketCzCloseWindow::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x3dd") {
        return PacketAhcGameGuard::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x3de") {
        return PacketCahAckGameGuard::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0436") {
        return PacketCzEnter2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x438") {
        return PacketCzUseSkill2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x439") {
        return PacketCzUseItem2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x43d") {
        return PacketZcSkillPostdelay::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x43e") {
        return PacketZcSkillPostdelayList::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x43f") {
        return PacketZcMsgStateChange2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x440") {
        return PacketZcMillenniumshield::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x441") {
        return PacketZcSkillinfoDelete::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x442") {
        return PacketZcSkillSelectRequest::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x443") {
        return PacketCzSkillSelectResponse::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x444") {
        return PacketZcSimpleCashPointItemlist::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x445") {
        return PacketCzSimpleBuyCashPointItem::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x446") {
        return PacketZcQuestNotifyEffect::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x448") {
        return PacketHcCharacterList::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x449") {
        return PacketZcHackshErrorMsg::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x44a") {
        return PacketCzClientVersion::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x44b") {
        return PacketCzCloseSimplecashShop::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7d0") {
        return PacketZcEsResult::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7d1") {
        return PacketCzEsGetList::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7d2") {
        return PacketZcEsList::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7d3") {
        return PacketCzEsChoose::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7d4") {
        return PacketCzEsCancel::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7d5") {
        return PacketZcEsReady::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7d6") {
        return PacketZcEsGoto::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7d7") {
        return PacketCzGroupinfoChangeV2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7d8") {
        return PacketZcReqGroupinfoChangeV2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7d9") {
        return PacketZcShortcutKeyListV2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7da") {
        return PacketCzChangeGroupMaster::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7db") {
        return PacketZcHoParChange::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7dc") {
        return PacketCzSeekParty::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7dd") {
        return PacketZcSeekParty::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7de") {
        return PacketCzSeekPartyMember::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7df") {
        return PacketZcSeekPartyMember::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7e0") {
        return PacketZcEsNotiMyinfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7e1") {
        return PacketZcSkillinfoUpdate2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7e2") {
        return PacketZcMsgValue::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7e3") {
        return PacketZcItemlistwinOpen::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7e4") {
        return PacketCzItemlistwinRes::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7e5") {
        return PacketChEnterCheckbot::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7e6") {
        return PacketZcMsgSkill::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7e7") {
        return PacketChCheckbot::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7e8") {
        return PacketHcCheckbot::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7e9") {
        return PacketHcCheckbotResult::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7ea") {
        return PacketCzBattleFieldList::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7eb") {
        return PacketZcBattleFieldList::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7ec") {
        return PacketCzJoinBattleField::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7ed") {
        return PacketZcJoinBattleField::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7ee") {
        return PacketCzCancelBattleField::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7ef") {
        return PacketZcCancelBattleField::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7f0") {
        return PacketCzReqBattleStateMonitor::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7f1") {
        return PacketZcAckBattleStateMonitor::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7f2") {
        return PacketZcBattleNotiStartStep::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7f3") {
        return PacketZcBattleJoinNotiDefer::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7f4") {
        return PacketZcBattleJoinDisableState::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7f5") {
        return PacketCzGmFullstrip::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7f6") {
        return PacketZcNotifyExp::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7f7") {
        return PacketZcNotifyMoveentry7::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7f8") {
        return PacketZcNotifyNewentry5::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7f9") {
        return PacketZcNotifyStandentry5::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7fa") {
        return PacketZcDeleteItemFromBody::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7fb") {
        return PacketZcUseskillAck2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7fc") {
        return PacketZcChangeGroupMaster::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7fe") {
        return PacketZcPlayNpcBgm::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x7ff") {
        return PacketZcDefineCheck::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x800") {
        return PacketZcPcPurchaseItemlistFrommc2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x801") {
        return PacketCzPcPurchaseItemlistFrommc2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x802") {
        return PacketCzPartyBookingReqRegister::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x803") {
        return PacketZcPartyBookingAckRegister::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x804") {
        return PacketCzPartyBookingReqSearch::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x805") {
        return PacketZcPartyBookingAckSearch::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x806") {
        return PacketCzPartyBookingReqDelete::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x807") {
        return PacketZcPartyBookingAckDelete::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x808") {
        return PacketCzPartyBookingReqUpdate::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x809") {
        return PacketZcPartyBookingNotifyInsert::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x80a") {
        return PacketZcPartyBookingNotifyUpdate::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x80b") {
        return PacketZcPartyBookingNotifyDelete::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x80c") {
        return PacketCzSimpleCashBtnshow::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x80d") {
        return PacketZcSimpleCashBtnshow::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0e08") {
        return PacketZcNotifyHpToGroupmR2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x80f") {
        return PacketZcAddExchangeItem2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x810") {
        return PacketZcOpenBuyingStore::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x811") {
        return PacketCzReqOpenBuyingStore::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x812") {
        return PacketZcFailedOpenBuyingStoreToBuyer::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x813") {
        return PacketZcMyitemlistBuyingStore::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x814") {
        return PacketZcBuyingStoreEntry::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x815") {
        return PacketCzReqCloseBuyingStore::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x816") {
        return PacketZcDisappearBuyingStoreEntry::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x817") {
        return PacketCzReqClickToBuyingStore::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x818") {
        return PacketZcAckItemlistBuyingStore::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x819") {
        return PacketCzReqTradeBuyingStore::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x81a") {
        return PacketZcFailedTradeBuyingStoreToBuyer::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x81b") {
        return PacketZcUpdateItemFromBuyingStore::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x81c") {
        return PacketZcItemDeleteBuyingStore::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x81d") {
        return PacketZcElInit::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x81e") {
        return PacketZcElParChange::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x81f") {
        return PacketZcBroadcast4::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x820") {
        return PacketZcCostumeSpriteChange::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x821") {
        return PacketAcOtpUser::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x822") {
        return PacketCaOtpAuthReq::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x823") {
        return PacketAcOtpAuthAck::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x824") {
        return PacketZcFailedTradeBuyingStoreToSeller::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x825a") {
        return PacketCaSsoLoginReqa::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x825") {
        return PacketCaSsoLoginReq::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x826") {
        return PacketAcSsoLoginAck::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x827") {
        return PacketChDeleteChar3Reserved::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x828") {
        return PacketHcDeleteChar3Reserved::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x829") {
        return PacketChDeleteChar3::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x82a") {
        return PacketHcDeleteChar3::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x82b") {
        return PacketChDeleteChar3Cancel::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x82c") {
        return PacketHcDeleteChar3Cancel::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x835") {
        return PacketCzSearchStoreInfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x836") {
        return PacketZcSearchStoreInfoAck::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x837") {
        return PacketZcSearchStoreInfoFailed::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x838") {
        return PacketCzSearchStoreInfoNextPage::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x839") {
        return PacketZcAckBanGuildSso::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x83a") {
        return PacketZcOpenSearchStoreInfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x83b") {
        return PacketCzCloseSearchStoreInfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x83c") {
        return PacketCzSsilistItemClick::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x83d") {
        return PacketZcSsilistItemClickAck::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x083e") {
        return PacketAcRefuseLoginR2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x841") {
        return PacketChSelectAccessibleMapname::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x035f") {
        return PacketCzRequestMove2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0ac5") {
        return PacketChSendMapInfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x082d") {
        return PacketHcAcceptEnterNeoUnionHeader::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0187") {
        return PacketCzPing::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0187") {
        return PacketZcAid2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0283") {
        return PacketMapConnection::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x08b9") {
        return PacketPincodeLoginstate::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0a39") {
        return PacketChMakeChar3::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0827") {
        return PacketChDeleteChar4Reserved::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0828") {
        return PacketHcDeleteChar4Reserved::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0b18") {
        return PacketZcInventoryExpansionInfo::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0ade") {
        return PacketZcOverweightPercent::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x018a") {
        return PacketCzReqDisconnect2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x018b") {
        return PacketZcReqDisconnectAck2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0368") {
        return PacketCzReqnameall2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0a30") {
        return PacketZcAckReqnameall2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0360") {
        return PacketCzRequestTime2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x09cd") {
        return PacketZcMsgColor::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x099b") {
        return PacketZcNotifyMapproperty2::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0a3b") {
        return PacketZcHatEffect::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0447") {
        return PacketCzBlockingPlayCancel::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0B1B") {
        return PacketZcLoadConfirm::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x09ff") {
        return PacketZcNotifyStandentry6::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x0915") {
        return PacketZcNotifyStandentry7::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x09fd") {
        return PacketZcNotifyMoveentry8::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    if packet_id.value.unwrap().eq("0x08c8") {
        return PacketZcNotifyAct3::from_json(entries, packetver).map(|p| Box::new(p) as Box<dyn Packet>);
    }
    }
    PacketUnknown::from_json(entries, packetver).map(|p| Box::new(p)  as Box<dyn Packet>)
}

